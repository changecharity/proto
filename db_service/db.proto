syntax = "proto3";

//option go_package = "github.com/chezky/changeproto/db_service";

package proto;

message GlobalSuccessReply {
    bool success = 1;
}

message StatusUpdate {
    bool status = 1;
}

message UserSignUp {
    string email = 1;
    string password = 2;
    string user_token = 4;
    string plaid_public_token = 5;
    string plaid_account_id = 6;
    int32 key = 8;
    int32 mask = 9;
    string bank_name = 10;
    string name = 11;
    string legal_name = 12;
}

service UserSignUpService {
    rpc SendUserSignUp (UserSignUp) returns (GlobalSuccessReply) {}
}

message OrgSignUp {
    string name = 1;
    string email = 2;
    string password = 3;
    int64 ein = 4;
    string org_token = 5;
    string plaid_public_token = 6;
    string plaid_account_id = 7;
    int32 key = 8;
    int32 mask = 9;
    string bank_name = 10;
    bool manual_verify = 11;
}

service OrgSignUpService {
    rpc SendOrgSignUp (OrgSignUp) returns (GlobalSuccessReply) {}
}

service CheckUserSignUpService {
    rpc CheckUserSignUp (UserSignUp) returns (GlobalSuccessReply) {}
}

service CheckOrgSignUpService {
    rpc CheckOrgSignUp (OrgSignUp) returns (GlobalSuccessReply) {}
}

service UpdateOrgItemService {
    rpc UpdateOrgItem (OrgSignUp) returns (OrgSignUp) {}
}

service ManualCompleteOrgSignUpService {
    rpc ManualCompleteOrgSignUp (OrgSignUp) returns (GlobalSuccessReply) {}
}

message ResendEmailAuthMsg {
    string token = 1;
    string table = 2;
}

service ResendEmailAuthService {
    rpc ResendEmailAuth (ResendEmailAuthMsg) returns (GlobalSuccessReply) {}
}

message Login {
    string email = 1;
    string password = 2;
    string user_token = 3;
    string table = 4;
    int32 key = 5;
}

service AuthLoginService{
    rpc AuthLogin (Login) returns (GlobalSuccessReply) {}
}

message TransactionItemID {
    string item_id = 1;
}

service BeginTransactionWHService{
    rpc BeginTransactionWH (TransactionItemID) returns (GlobalSuccessReply) {}
}

message StripeChargeID {
    string charge_id = 1;
}

service ConfirmTransferService{
    rpc ConfirmTransfer (StripeChargeID) returns (GlobalSuccessReply) {}
}

message OrgName {
    string name = 1;
    int32 offset = 2;
    string user_token = 3;
}

message OrgNameReply {
    repeated string names = 1;
}

service SearchOrgNameService {
    rpc SearchOrgName (OrgName) returns (OrgNameReply) {}
}

message TransferPDFParams {
    // add start and end date
    string user_token = 1;
}

service TransferPDFService {
    rpc TransferPDF (TransferPDFParams) returns (GlobalSuccessReply) {}
}

service EmailAllRecieptsService {
    rpc EmailAllReciepts (GlobalSuccessReply) returns (GlobalSuccessReply) {}
}

message SaveLogoMsg {
    string org_token = 1;
    string file_location = 2;
}

service SaveLogoService {
    rpc SaveLogo (SaveLogoMsg) returns (GlobalSuccessReply) {}
}

message GetTransactionsMsg {
    string user_token = 1;
    int32 offset = 2;
}

message GetTransactionsMsgReply {
    repeated TransactionData transactions = 1;
}

message TransactionData {
    string name = 1;
    string dot = 2;
    double amount = 3;
    int32 change = 4;
}

service GetTransactionsService {
    rpc GetTransactions (GetTransactionsMsg) returns (GetTransactionsMsgReply) {}
}


message UpdateThresholdMsg {
    string user_token = 1;
    int32 threshold = 2;
    int32 monthly_limit = 3;
}

service UpdateThresholdService {
    rpc UpdateThreshold (UpdateThresholdMsg) returns (GlobalSuccessReply) {}
}

service UpdateMonthlyLimitService {
    rpc UpdateMonthlyLimit (UpdateThresholdMsg) returns (GlobalSuccessReply) {}
}

message UserToken {
    string user_token = 1;
}

message OrgToken {
    string org_token = 1;
}

message UsersOrgInfoReply {
    string name = 1;
    string logo_location = 2;
}

service GetUsersOrgInfoService {
    rpc GetUsersOrgInfo (UserToken) returns (UsersOrgInfoReply) {}
}

message UsersTotalsReply {
    int64 monthly_total = 1;
    int64 weekly_total = 2;
}

service GetUsersTotalsService {
    rpc GetUsersTotals (UserToken) returns (UsersTotalsReply) {}
}

message UsersProfileReply {
    int32 threshold = 1;
    int32 mask = 2;
    string bank_name = 3;
    string legal_name = 4;
    int32 monthly_limit = 5;
    repeated UserCard cards = 6;
    bool round_up_status = 7;
}

message UserCard {
    string bank_name = 1;
    int32 mask = 2;
    int32 selected_org = 3;
}

service GetUsersProfileService {
    rpc GetUsersProfile (UserToken) returns (UsersProfileReply) {}
}

message DeleteUsersBAMsg {
    string user_token = 1;
    string password = 2;
}

service DeleteUsersBAService {
    rpc DeleteUsersBA (DeleteUsersBAMsg) returns (GlobalSuccessReply) {}
}

service UpdateUsersBAService {
    rpc UpdateUsersBA (UserSignUp) returns (GlobalSuccessReply) {}
}

message ValidNewAccMsg {
    string account_id = 1;
}

service ValidNewAccService {
    rpc ValidNewAcc (ValidNewAccMsg) returns (GlobalSuccessReply) {}
}

message ValidPassMsg {
    string token = 1;
    string table = 2;
    string password = 3;
    int32 key = 4;
}

service ValidPassService {
    rpc ValidPass (ValidPassMsg) returns (GlobalSuccessReply) {}
}

service ValidKeyService {
    rpc ValidKey (ValidPassMsg) returns (GlobalSuccessReply) {}
}

service SendForgotPassService {
    rpc SendForgotPass (Login) returns (GlobalSuccessReply) {}
}

service ForgotPassService {
    rpc ForgotPass (Login) returns (GlobalSuccessReply) {}
}

service CheckOrgTosAcceptedService {
    rpc CheckOrgTosAccepted (OrgToken) returns (GlobalSuccessReply) {}
}

service ResendOrgsTosService {
    rpc ResendOrgsTos (OrgToken) returns (GlobalSuccessReply) {}
}

message Dashboard {
    int64 total_collected = 1;
    int64 total_collected_month = 2;
    int64 total_collected_week = 3;
    int32 total_users = 4;
}

service GetDashboardService {
    rpc GetDashboard (OrgToken) returns (Dashboard) {}
}

message OrgsTransfers {
    repeated SingleTransfer transfers = 1;
}

message SingleTransfer {
    string name = 1;
    string dop = 2;
    int64 transfered_amount = 3;
}

message GetTransfersMsg {
    string org_token = 1;
    int32 offset = 2;
}

// GetTransfers is for orgs and gets their transfers as opposed to a user who would get his transactions
service GetTransfersService {
    rpc GetTransfers (GetTransfersMsg) returns (OrgsTransfers) {}
}

message LogoAndQrCode {
    string qr = 1;
    string logo = 2;
    string name = 3;
    string email = 4;
    string description = 5;
    string url = 6;
}

service OrgsGetQrService {
    rpc OrgsGetQr (OrgToken) returns (LogoAndQrCode) {}
}

service OrgsGetLogoService {
    rpc OrgsGetLogo (OrgToken) returns (LogoAndQrCode) {}
}


message TokenAndOrg {
    string user_token = 1;
    int32 org = 2;
}

service SetOrgService {
    rpc SetOrg (TokenAndOrg) returns (GlobalSuccessReply) {}
}

message SearchOrgsMsg {
    repeated SearchOrgResults orgs = 1;
}

message SearchOrgResults {
    string name = 1;
    string logo = 2;
    int32 id = 3;
}

service GetOrgsSearchService {
    rpc GetOrgsSearch (OrgName) returns (SearchOrgsMsg) {}
}

message GetOrgInfoSearchMsg {
    string name = 1;
    string logo = 2;
    string description = 3;
    int32 id = 4;
}

service GetOrgInfoSearchService {
    rpc GetOrgInfoSearch (TokenAndOrg) returns (GetOrgInfoSearchMsg) {}
}

message UpdateOrgMsg {
    string org_token = 1;
    string name = 2;
    string description = 3;
}

service UpdateOrgInfoService {
    rpc UpdateOrgInfo (UpdateOrgMsg) returns (GlobalSuccessReply) {}
}

service AddNewCardService {
    rpc AddNewCard (UserSignUp) returns (GlobalSuccessReply) {}
}

service UpdateRoundUpStatusService {
    rpc UpdateRoundUpStatus (StatusUpdate) returns (GlobalSuccessReply) {}
}

service CreateCardLinkTokenService {
    rpc CreateCardLinkToken (UserToken) returns (ResendEmailAuthMsg) {}
}

service CheckCardLinkedService {
    rpc CheckCardLinked (UserToken) returns (GlobalSuccessReply) {}
}

service HourlyDBCallService {
    rpc HourlyDBCall (GlobalSuccessReply) returns (GlobalSuccessReply) {}
}