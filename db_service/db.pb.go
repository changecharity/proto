// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.3
// source: db.proto

//option go_package = "github.com/chezky/changeproto/db_service";

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GlobalSuccessReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *GlobalSuccessReply) Reset() {
	*x = GlobalSuccessReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalSuccessReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalSuccessReply) ProtoMessage() {}

func (x *GlobalSuccessReply) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalSuccessReply.ProtoReflect.Descriptor instead.
func (*GlobalSuccessReply) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{0}
}

func (x *GlobalSuccessReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UserSignUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email            string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password         string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	UserToken        string `protobuf:"bytes,4,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`
	PlaidPublicToken string `protobuf:"bytes,5,opt,name=plaid_public_token,json=plaidPublicToken,proto3" json:"plaid_public_token,omitempty"`
	PlaidAccountId   string `protobuf:"bytes,6,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	Key              int32  `protobuf:"varint,8,opt,name=key,proto3" json:"key,omitempty"`
	Mask             int32  `protobuf:"varint,9,opt,name=mask,proto3" json:"mask,omitempty"`
	BankName         string `protobuf:"bytes,10,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
	Name             string `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *UserSignUp) Reset() {
	*x = UserSignUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSignUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSignUp) ProtoMessage() {}

func (x *UserSignUp) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSignUp.ProtoReflect.Descriptor instead.
func (*UserSignUp) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{1}
}

func (x *UserSignUp) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserSignUp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserSignUp) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *UserSignUp) GetPlaidPublicToken() string {
	if x != nil {
		return x.PlaidPublicToken
	}
	return ""
}

func (x *UserSignUp) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *UserSignUp) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

func (x *UserSignUp) GetMask() int32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *UserSignUp) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *UserSignUp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type OrgSignUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email            string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password         string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Ein              int64  `protobuf:"varint,4,opt,name=ein,proto3" json:"ein,omitempty"`
	OrgToken         string `protobuf:"bytes,5,opt,name=org_token,json=orgToken,proto3" json:"org_token,omitempty"`
	PlaidPublicToken string `protobuf:"bytes,6,opt,name=plaid_public_token,json=plaidPublicToken,proto3" json:"plaid_public_token,omitempty"`
	PlaidAccountId   string `protobuf:"bytes,7,opt,name=plaid_account_id,json=plaidAccountId,proto3" json:"plaid_account_id,omitempty"`
	Key              int32  `protobuf:"varint,8,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *OrgSignUp) Reset() {
	*x = OrgSignUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgSignUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgSignUp) ProtoMessage() {}

func (x *OrgSignUp) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgSignUp.ProtoReflect.Descriptor instead.
func (*OrgSignUp) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{2}
}

func (x *OrgSignUp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrgSignUp) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OrgSignUp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *OrgSignUp) GetEin() int64 {
	if x != nil {
		return x.Ein
	}
	return 0
}

func (x *OrgSignUp) GetOrgToken() string {
	if x != nil {
		return x.OrgToken
	}
	return ""
}

func (x *OrgSignUp) GetPlaidPublicToken() string {
	if x != nil {
		return x.PlaidPublicToken
	}
	return ""
}

func (x *OrgSignUp) GetPlaidAccountId() string {
	if x != nil {
		return x.PlaidAccountId
	}
	return ""
}

func (x *OrgSignUp) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

type ResendEmailAuthMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Table string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *ResendEmailAuthMsg) Reset() {
	*x = ResendEmailAuthMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResendEmailAuthMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResendEmailAuthMsg) ProtoMessage() {}

func (x *ResendEmailAuthMsg) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResendEmailAuthMsg.ProtoReflect.Descriptor instead.
func (*ResendEmailAuthMsg) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{3}
}

func (x *ResendEmailAuthMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ResendEmailAuthMsg) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email     string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	UserToken string `protobuf:"bytes,3,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`
	Table     string `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
	Key       int32  `protobuf:"varint,5,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Login) Reset() {
	*x = Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login) ProtoMessage() {}

func (x *Login) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login.ProtoReflect.Descriptor instead.
func (*Login) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{4}
}

func (x *Login) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Login) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Login) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *Login) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Login) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

type TransactionItemID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId string `protobuf:"bytes,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`
}

func (x *TransactionItemID) Reset() {
	*x = TransactionItemID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionItemID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionItemID) ProtoMessage() {}

func (x *TransactionItemID) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionItemID.ProtoReflect.Descriptor instead.
func (*TransactionItemID) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{5}
}

func (x *TransactionItemID) GetItemId() string {
	if x != nil {
		return x.ItemId
	}
	return ""
}

type StripeChargeID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeId string `protobuf:"bytes,1,opt,name=charge_id,json=chargeId,proto3" json:"charge_id,omitempty"`
}

func (x *StripeChargeID) Reset() {
	*x = StripeChargeID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StripeChargeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StripeChargeID) ProtoMessage() {}

func (x *StripeChargeID) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StripeChargeID.ProtoReflect.Descriptor instead.
func (*StripeChargeID) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{6}
}

func (x *StripeChargeID) GetChargeId() string {
	if x != nil {
		return x.ChargeId
	}
	return ""
}

type OrgName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *OrgName) Reset() {
	*x = OrgName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgName) ProtoMessage() {}

func (x *OrgName) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgName.ProtoReflect.Descriptor instead.
func (*OrgName) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{7}
}

func (x *OrgName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrgName) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type OrgNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *OrgNameReply) Reset() {
	*x = OrgNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgNameReply) ProtoMessage() {}

func (x *OrgNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgNameReply.ProtoReflect.Descriptor instead.
func (*OrgNameReply) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{8}
}

func (x *OrgNameReply) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type TransferPDFParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// add start and end date
	UserToken string `protobuf:"bytes,1,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`
}

func (x *TransferPDFParams) Reset() {
	*x = TransferPDFParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferPDFParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferPDFParams) ProtoMessage() {}

func (x *TransferPDFParams) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferPDFParams.ProtoReflect.Descriptor instead.
func (*TransferPDFParams) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{9}
}

func (x *TransferPDFParams) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

type SaveLogoMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgToken     string `protobuf:"bytes,1,opt,name=org_token,json=orgToken,proto3" json:"org_token,omitempty"`
	FileLocation string `protobuf:"bytes,2,opt,name=file_location,json=fileLocation,proto3" json:"file_location,omitempty"`
}

func (x *SaveLogoMsg) Reset() {
	*x = SaveLogoMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SaveLogoMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveLogoMsg) ProtoMessage() {}

func (x *SaveLogoMsg) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveLogoMsg.ProtoReflect.Descriptor instead.
func (*SaveLogoMsg) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{10}
}

func (x *SaveLogoMsg) GetOrgToken() string {
	if x != nil {
		return x.OrgToken
	}
	return ""
}

func (x *SaveLogoMsg) GetFileLocation() string {
	if x != nil {
		return x.FileLocation
	}
	return ""
}

type GetTransactionsMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserToken string `protobuf:"bytes,1,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`
	Offset    int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *GetTransactionsMsg) Reset() {
	*x = GetTransactionsMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsMsg) ProtoMessage() {}

func (x *GetTransactionsMsg) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsMsg.ProtoReflect.Descriptor instead.
func (*GetTransactionsMsg) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{11}
}

func (x *GetTransactionsMsg) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *GetTransactionsMsg) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type GetTransactionsMsgReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Transactions []*TransactionData `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
}

func (x *GetTransactionsMsgReply) Reset() {
	*x = GetTransactionsMsgReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetTransactionsMsgReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetTransactionsMsgReply) ProtoMessage() {}

func (x *GetTransactionsMsgReply) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetTransactionsMsgReply.ProtoReflect.Descriptor instead.
func (*GetTransactionsMsgReply) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{12}
}

func (x *GetTransactionsMsgReply) GetTransactions() []*TransactionData {
	if x != nil {
		return x.Transactions
	}
	return nil
}

type TransactionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Dot    string  `protobuf:"bytes,2,opt,name=dot,proto3" json:"dot,omitempty"`
	Amount float64 `protobuf:"fixed64,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Change int32   `protobuf:"varint,4,opt,name=change,proto3" json:"change,omitempty"`
}

func (x *TransactionData) Reset() {
	*x = TransactionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionData) ProtoMessage() {}

func (x *TransactionData) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionData.ProtoReflect.Descriptor instead.
func (*TransactionData) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{13}
}

func (x *TransactionData) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TransactionData) GetDot() string {
	if x != nil {
		return x.Dot
	}
	return ""
}

func (x *TransactionData) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *TransactionData) GetChange() int32 {
	if x != nil {
		return x.Change
	}
	return 0
}

type UpdateThresholdMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserToken string `protobuf:"bytes,1,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`
	Threshold int32  `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
}

func (x *UpdateThresholdMsg) Reset() {
	*x = UpdateThresholdMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateThresholdMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateThresholdMsg) ProtoMessage() {}

func (x *UpdateThresholdMsg) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateThresholdMsg.ProtoReflect.Descriptor instead.
func (*UpdateThresholdMsg) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateThresholdMsg) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *UpdateThresholdMsg) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

type UserToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserToken string `protobuf:"bytes,1,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`
}

func (x *UserToken) Reset() {
	*x = UserToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserToken) ProtoMessage() {}

func (x *UserToken) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserToken.ProtoReflect.Descriptor instead.
func (*UserToken) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{15}
}

func (x *UserToken) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

type OrgToken struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrgToken string `protobuf:"bytes,1,opt,name=org_token,json=orgToken,proto3" json:"org_token,omitempty"`
}

func (x *OrgToken) Reset() {
	*x = OrgToken{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgToken) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgToken) ProtoMessage() {}

func (x *OrgToken) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgToken.ProtoReflect.Descriptor instead.
func (*OrgToken) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{16}
}

func (x *OrgToken) GetOrgToken() string {
	if x != nil {
		return x.OrgToken
	}
	return ""
}

type UsersOrgInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	LogoLocation string `protobuf:"bytes,2,opt,name=logo_location,json=logoLocation,proto3" json:"logo_location,omitempty"`
}

func (x *UsersOrgInfoReply) Reset() {
	*x = UsersOrgInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersOrgInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersOrgInfoReply) ProtoMessage() {}

func (x *UsersOrgInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersOrgInfoReply.ProtoReflect.Descriptor instead.
func (*UsersOrgInfoReply) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{17}
}

func (x *UsersOrgInfoReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UsersOrgInfoReply) GetLogoLocation() string {
	if x != nil {
		return x.LogoLocation
	}
	return ""
}

type UsersTotalsReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonthlyTotal int64 `protobuf:"varint,1,opt,name=monthly_total,json=monthlyTotal,proto3" json:"monthly_total,omitempty"`
	WeeklyTotal  int64 `protobuf:"varint,2,opt,name=weekly_total,json=weeklyTotal,proto3" json:"weekly_total,omitempty"`
}

func (x *UsersTotalsReply) Reset() {
	*x = UsersTotalsReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersTotalsReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersTotalsReply) ProtoMessage() {}

func (x *UsersTotalsReply) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersTotalsReply.ProtoReflect.Descriptor instead.
func (*UsersTotalsReply) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{18}
}

func (x *UsersTotalsReply) GetMonthlyTotal() int64 {
	if x != nil {
		return x.MonthlyTotal
	}
	return 0
}

func (x *UsersTotalsReply) GetWeeklyTotal() int64 {
	if x != nil {
		return x.WeeklyTotal
	}
	return 0
}

type UsersProfileReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold int32  `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Mask      int32  `protobuf:"varint,2,opt,name=mask,proto3" json:"mask,omitempty"`
	BankName  string `protobuf:"bytes,3,opt,name=bank_name,json=bankName,proto3" json:"bank_name,omitempty"`
}

func (x *UsersProfileReply) Reset() {
	*x = UsersProfileReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersProfileReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersProfileReply) ProtoMessage() {}

func (x *UsersProfileReply) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersProfileReply.ProtoReflect.Descriptor instead.
func (*UsersProfileReply) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{19}
}

func (x *UsersProfileReply) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *UsersProfileReply) GetMask() int32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *UsersProfileReply) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

type DeleteUsersBAMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserToken string `protobuf:"bytes,1,opt,name=user_token,json=userToken,proto3" json:"user_token,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *DeleteUsersBAMsg) Reset() {
	*x = DeleteUsersBAMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUsersBAMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUsersBAMsg) ProtoMessage() {}

func (x *DeleteUsersBAMsg) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUsersBAMsg.ProtoReflect.Descriptor instead.
func (*DeleteUsersBAMsg) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{20}
}

func (x *DeleteUsersBAMsg) GetUserToken() string {
	if x != nil {
		return x.UserToken
	}
	return ""
}

func (x *DeleteUsersBAMsg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type ValidNewAccMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AccountId string `protobuf:"bytes,1,opt,name=account_id,json=accountId,proto3" json:"account_id,omitempty"`
}

func (x *ValidNewAccMsg) Reset() {
	*x = ValidNewAccMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidNewAccMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidNewAccMsg) ProtoMessage() {}

func (x *ValidNewAccMsg) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidNewAccMsg.ProtoReflect.Descriptor instead.
func (*ValidNewAccMsg) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{21}
}

func (x *ValidNewAccMsg) GetAccountId() string {
	if x != nil {
		return x.AccountId
	}
	return ""
}

type ValidPassMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token    string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Table    string `protobuf:"bytes,2,opt,name=table,proto3" json:"table,omitempty"`
	Password string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Key      int32  `protobuf:"varint,4,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *ValidPassMsg) Reset() {
	*x = ValidPassMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValidPassMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValidPassMsg) ProtoMessage() {}

func (x *ValidPassMsg) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValidPassMsg.ProtoReflect.Descriptor instead.
func (*ValidPassMsg) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{22}
}

func (x *ValidPassMsg) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *ValidPassMsg) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *ValidPassMsg) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *ValidPassMsg) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

var File_db_proto protoreflect.FileDescriptor

var file_db_proto_rawDesc = []byte{
	0x0a, 0x08, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x8c, 0x02, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70,
	0x6c, 0x61, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x64,
	0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12,
	0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0xea, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x03, 0x65, 0x69, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x67, 0x5f, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x67, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x70, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x5f, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61,
	0x69, 0x64, 0x41, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x40, 0x0a,
	0x12, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x68,
	0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x80, 0x01, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x22, 0x2c, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x22, 0x2d, 0x0a, 0x0e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x49, 0x44, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x64, 0x22,
	0x35, 0x0a, 0x07, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x24, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x32, 0x0a, 0x11,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x44, 0x46, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x22, 0x4f, 0x0a, 0x0b, 0x53, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x4d, 0x73, 0x67, 0x12,
	0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x67, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6f, 0x72, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x23, 0x0a, 0x0d,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x4b, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x22, 0x55,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x3a, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x67, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x64, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6f, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x22, 0x51,
	0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x22, 0x2a, 0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d,
	0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x27, 0x0a,
	0x08, 0x4f, 0x72, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x72, 0x67,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x72,
	0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x4c, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f,
	0x72, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6c, 0x6f, 0x67, 0x6f, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5a, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x74,
	0x68, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x21, 0x0a,
	0x0c, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0b, 0x77, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x54, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0x62, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f,
	0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68,
	0x6f, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x6e, 0x6b, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x61, 0x6e, 0x6b,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x4d, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x42, 0x41, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73,
	0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x2f, 0x0a, 0x0e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x65, 0x77, 0x41,
	0x63, 0x63, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x49, 0x64, 0x22, 0x68, 0x0a, 0x0c, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x4d, 0x73, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x32, 0x55,
	0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x52, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x53, 0x65, 0x6e,
	0x64, 0x4f, 0x72, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x5b, 0x0a, 0x16, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x58, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f,
	0x72, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x3f, 0x0a, 0x0e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x69, 0x67,
	0x6e, 0x55, 0x70, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x32, 0x63, 0x0a, 0x16, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41,
	0x75, 0x74, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0f, 0x52, 0x65,
	0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x45, 0x6d, 0x61, 0x69,
	0x6c, 0x41, 0x75, 0x74, 0x68, 0x4d, 0x73, 0x67, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x4a, 0x0a, 0x10, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x41, 0x75, 0x74,
	0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x32, 0x68, 0x0a, 0x19, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x48, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b,
	0x0a, 0x12, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x48, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x44, 0x1a, 0x19,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x5f, 0x0a, 0x16, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x44, 0x1a,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x4e, 0x0a, 0x14,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x72,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x5a, 0x0a, 0x12,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x44, 0x46, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x44,
	0x46, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x65, 0x72, 0x50, 0x44, 0x46, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x4e, 0x0a, 0x0f, 0x53, 0x61, 0x76, 0x65,
	0x4c, 0x6f, 0x67, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x53,
	0x61, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x61, 0x76, 0x65, 0x4c, 0x6f, 0x67, 0x6f, 0x4d, 0x73, 0x67, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x68, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65,
	0x74, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x73, 0x67,
	0x1a, 0x1e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4d, 0x73, 0x67, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x32, 0x63, 0x0a, 0x16, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x49, 0x0a, 0x0f,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x68,
	0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x4d, 0x73, 0x67, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x59, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x4f, 0x72, 0x67, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x32, 0x56, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f,
	0x74, 0x61, 0x6c, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x73, 0x12, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a,
	0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x54, 0x6f, 0x74,
	0x61, 0x6c, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x59, 0x0a, 0x16, 0x47, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x5d, 0x0a, 0x14, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x73, 0x42, 0x41, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x41, 0x12, 0x17,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x42, 0x41, 0x4d, 0x73, 0x67, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x22, 0x00, 0x32, 0x57, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x42, 0x41, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x42, 0x41, 0x12, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x57, 0x0a,
	0x12, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0b, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x4e, 0x65, 0x77, 0x41,
	0x63, 0x63, 0x12, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x4e, 0x65, 0x77, 0x41, 0x63, 0x63, 0x4d, 0x73, 0x67, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x51, 0x0a, 0x10, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50,
	0x61, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x50, 0x61, 0x73, 0x73, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x1a, 0x19, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x4f, 0x0a, 0x0f, 0x56, 0x61, 0x6c,
	0x69, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x08,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x50, 0x61, 0x73, 0x73, 0x4d, 0x73, 0x67, 0x1a, 0x19, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x54, 0x0a, 0x15, 0x53, 0x65,
	0x6e, 0x64, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3b, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x46, 0x6f, 0x72, 0x67, 0x6f,
	0x74, 0x50, 0x61, 0x73, 0x73, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62,
	0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00,
	0x32, 0x4c, 0x0a, 0x11, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50, 0x61, 0x73, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x67, 0x6f, 0x74, 0x50,
	0x61, 0x73, 0x73, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69,
	0x6e, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x61,
	0x0a, 0x1a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x54, 0x6f, 0x73, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x13,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x54, 0x6f, 0x73, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x67, 0x54,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x32, 0x55, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x67, 0x73, 0x54,
	0x6f, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3d, 0x0a, 0x0d, 0x52, 0x65, 0x73,
	0x65, 0x6e, 0x64, 0x4f, 0x72, 0x67, 0x73, 0x54, 0x6f, 0x73, 0x12, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x67, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_db_proto_rawDescOnce sync.Once
	file_db_proto_rawDescData = file_db_proto_rawDesc
)

func file_db_proto_rawDescGZIP() []byte {
	file_db_proto_rawDescOnce.Do(func() {
		file_db_proto_rawDescData = protoimpl.X.CompressGZIP(file_db_proto_rawDescData)
	})
	return file_db_proto_rawDescData
}

var file_db_proto_msgTypes = make([]protoimpl.MessageInfo, 23)
var file_db_proto_goTypes = []interface{}{
	(*GlobalSuccessReply)(nil),      // 0: proto.GlobalSuccessReply
	(*UserSignUp)(nil),              // 1: proto.UserSignUp
	(*OrgSignUp)(nil),               // 2: proto.OrgSignUp
	(*ResendEmailAuthMsg)(nil),      // 3: proto.ResendEmailAuthMsg
	(*Login)(nil),                   // 4: proto.Login
	(*TransactionItemID)(nil),       // 5: proto.TransactionItemID
	(*StripeChargeID)(nil),          // 6: proto.StripeChargeID
	(*OrgName)(nil),                 // 7: proto.OrgName
	(*OrgNameReply)(nil),            // 8: proto.OrgNameReply
	(*TransferPDFParams)(nil),       // 9: proto.TransferPDFParams
	(*SaveLogoMsg)(nil),             // 10: proto.SaveLogoMsg
	(*GetTransactionsMsg)(nil),      // 11: proto.GetTransactionsMsg
	(*GetTransactionsMsgReply)(nil), // 12: proto.GetTransactionsMsgReply
	(*TransactionData)(nil),         // 13: proto.TransactionData
	(*UpdateThresholdMsg)(nil),      // 14: proto.UpdateThresholdMsg
	(*UserToken)(nil),               // 15: proto.UserToken
	(*OrgToken)(nil),                // 16: proto.OrgToken
	(*UsersOrgInfoReply)(nil),       // 17: proto.UsersOrgInfoReply
	(*UsersTotalsReply)(nil),        // 18: proto.UsersTotalsReply
	(*UsersProfileReply)(nil),       // 19: proto.UsersProfileReply
	(*DeleteUsersBAMsg)(nil),        // 20: proto.DeleteUsersBAMsg
	(*ValidNewAccMsg)(nil),          // 21: proto.ValidNewAccMsg
	(*ValidPassMsg)(nil),            // 22: proto.ValidPassMsg
}
var file_db_proto_depIdxs = []int32{
	13, // 0: proto.GetTransactionsMsgReply.transactions:type_name -> proto.TransactionData
	1,  // 1: proto.UserSignUpService.SendUserSignUp:input_type -> proto.UserSignUp
	2,  // 2: proto.OrgSignUpService.SendOrgSignUp:input_type -> proto.OrgSignUp
	1,  // 3: proto.CheckUserSignUpService.CheckUserSignUp:input_type -> proto.UserSignUp
	2,  // 4: proto.CheckOrgSignUpService.CheckOrgSignUp:input_type -> proto.OrgSignUp
	3,  // 5: proto.ResendEmailAuthService.ResendEmailAuth:input_type -> proto.ResendEmailAuthMsg
	4,  // 6: proto.AuthLoginService.AuthLogin:input_type -> proto.Login
	5,  // 7: proto.BeginTransactionWHService.BeginTransactionWH:input_type -> proto.TransactionItemID
	6,  // 8: proto.ConfirmTransferService.ConfirmTransfer:input_type -> proto.StripeChargeID
	7,  // 9: proto.SearchOrgNameService.SearchOrgName:input_type -> proto.OrgName
	9,  // 10: proto.TransferPDFService.TransferPDF:input_type -> proto.TransferPDFParams
	10, // 11: proto.SaveLogoService.SaveLogo:input_type -> proto.SaveLogoMsg
	11, // 12: proto.GetTransactionsService.GetTransactions:input_type -> proto.GetTransactionsMsg
	14, // 13: proto.UpdateThresholdService.UpdateThreshold:input_type -> proto.UpdateThresholdMsg
	15, // 14: proto.GetUsersOrgInfoService.GetUsersOrgInfo:input_type -> proto.UserToken
	15, // 15: proto.GetUsersTotalsService.GetUsersTotals:input_type -> proto.UserToken
	15, // 16: proto.GetUsersProfileService.GetUsersProfile:input_type -> proto.UserToken
	20, // 17: proto.DeleteUsersBAService.DeleteUsersBA:input_type -> proto.DeleteUsersBAMsg
	1,  // 18: proto.UpdateUsersBAService.UpdateUsersBA:input_type -> proto.UserSignUp
	21, // 19: proto.ValidNewAccService.ValidNewAcc:input_type -> proto.ValidNewAccMsg
	22, // 20: proto.ValidPassService.ValidPass:input_type -> proto.ValidPassMsg
	22, // 21: proto.ValidKeyService.ValidKey:input_type -> proto.ValidPassMsg
	4,  // 22: proto.SendForgotPassService.SendForgotPass:input_type -> proto.Login
	4,  // 23: proto.ForgotPassService.ForgotPass:input_type -> proto.Login
	16, // 24: proto.CheckOrgTosAcceptedService.CheckOrgTosAccepted:input_type -> proto.OrgToken
	16, // 25: proto.ResendOrgsTosService.ResendOrgsTos:input_type -> proto.OrgToken
	0,  // 26: proto.UserSignUpService.SendUserSignUp:output_type -> proto.GlobalSuccessReply
	0,  // 27: proto.OrgSignUpService.SendOrgSignUp:output_type -> proto.GlobalSuccessReply
	0,  // 28: proto.CheckUserSignUpService.CheckUserSignUp:output_type -> proto.GlobalSuccessReply
	0,  // 29: proto.CheckOrgSignUpService.CheckOrgSignUp:output_type -> proto.GlobalSuccessReply
	0,  // 30: proto.ResendEmailAuthService.ResendEmailAuth:output_type -> proto.GlobalSuccessReply
	0,  // 31: proto.AuthLoginService.AuthLogin:output_type -> proto.GlobalSuccessReply
	0,  // 32: proto.BeginTransactionWHService.BeginTransactionWH:output_type -> proto.GlobalSuccessReply
	0,  // 33: proto.ConfirmTransferService.ConfirmTransfer:output_type -> proto.GlobalSuccessReply
	8,  // 34: proto.SearchOrgNameService.SearchOrgName:output_type -> proto.OrgNameReply
	0,  // 35: proto.TransferPDFService.TransferPDF:output_type -> proto.GlobalSuccessReply
	0,  // 36: proto.SaveLogoService.SaveLogo:output_type -> proto.GlobalSuccessReply
	12, // 37: proto.GetTransactionsService.GetTransactions:output_type -> proto.GetTransactionsMsgReply
	0,  // 38: proto.UpdateThresholdService.UpdateThreshold:output_type -> proto.GlobalSuccessReply
	17, // 39: proto.GetUsersOrgInfoService.GetUsersOrgInfo:output_type -> proto.UsersOrgInfoReply
	18, // 40: proto.GetUsersTotalsService.GetUsersTotals:output_type -> proto.UsersTotalsReply
	19, // 41: proto.GetUsersProfileService.GetUsersProfile:output_type -> proto.UsersProfileReply
	0,  // 42: proto.DeleteUsersBAService.DeleteUsersBA:output_type -> proto.GlobalSuccessReply
	0,  // 43: proto.UpdateUsersBAService.UpdateUsersBA:output_type -> proto.GlobalSuccessReply
	0,  // 44: proto.ValidNewAccService.ValidNewAcc:output_type -> proto.GlobalSuccessReply
	0,  // 45: proto.ValidPassService.ValidPass:output_type -> proto.GlobalSuccessReply
	0,  // 46: proto.ValidKeyService.ValidKey:output_type -> proto.GlobalSuccessReply
	0,  // 47: proto.SendForgotPassService.SendForgotPass:output_type -> proto.GlobalSuccessReply
	0,  // 48: proto.ForgotPassService.ForgotPass:output_type -> proto.GlobalSuccessReply
	0,  // 49: proto.CheckOrgTosAcceptedService.CheckOrgTosAccepted:output_type -> proto.GlobalSuccessReply
	0,  // 50: proto.ResendOrgsTosService.ResendOrgsTos:output_type -> proto.GlobalSuccessReply
	26, // [26:51] is the sub-list for method output_type
	1,  // [1:26] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_db_proto_init() }
func file_db_proto_init() {
	if File_db_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_db_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalSuccessReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSignUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgSignUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResendEmailAuthMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionItemID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StripeChargeID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferPDFParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SaveLogoMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetTransactionsMsgReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateThresholdMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgToken); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersOrgInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersTotalsReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersProfileReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUsersBAMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidNewAccMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValidPassMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_db_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   23,
			NumExtensions: 0,
			NumServices:   25,
		},
		GoTypes:           file_db_proto_goTypes,
		DependencyIndexes: file_db_proto_depIdxs,
		MessageInfos:      file_db_proto_msgTypes,
	}.Build()
	File_db_proto = out.File
	file_db_proto_rawDesc = nil
	file_db_proto_goTypes = nil
	file_db_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserSignUpServiceClient is the client API for UserSignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserSignUpServiceClient interface {
	SendUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type userSignUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSignUpServiceClient(cc grpc.ClientConnInterface) UserSignUpServiceClient {
	return &userSignUpServiceClient{cc}
}

func (c *userSignUpServiceClient) SendUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.UserSignUpService/SendUserSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSignUpServiceServer is the server API for UserSignUpService service.
type UserSignUpServiceServer interface {
	SendUserSignUp(context.Context, *UserSignUp) (*GlobalSuccessReply, error)
}

// UnimplementedUserSignUpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserSignUpServiceServer struct {
}

func (*UnimplementedUserSignUpServiceServer) SendUserSignUp(context.Context, *UserSignUp) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserSignUp not implemented")
}

func RegisterUserSignUpServiceServer(s *grpc.Server, srv UserSignUpServiceServer) {
	s.RegisterService(&_UserSignUpService_serviceDesc, srv)
}

func _UserSignUpService_SendUserSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSignUpServiceServer).SendUserSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserSignUpService/SendUserSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSignUpServiceServer).SendUserSignUp(ctx, req.(*UserSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSignUpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserSignUpService",
	HandlerType: (*UserSignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendUserSignUp",
			Handler:    _UserSignUpService_SendUserSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// OrgSignUpServiceClient is the client API for OrgSignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrgSignUpServiceClient interface {
	SendOrgSignUp(ctx context.Context, in *OrgSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type orgSignUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgSignUpServiceClient(cc grpc.ClientConnInterface) OrgSignUpServiceClient {
	return &orgSignUpServiceClient{cc}
}

func (c *orgSignUpServiceClient) SendOrgSignUp(ctx context.Context, in *OrgSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.OrgSignUpService/SendOrgSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgSignUpServiceServer is the server API for OrgSignUpService service.
type OrgSignUpServiceServer interface {
	SendOrgSignUp(context.Context, *OrgSignUp) (*GlobalSuccessReply, error)
}

// UnimplementedOrgSignUpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrgSignUpServiceServer struct {
}

func (*UnimplementedOrgSignUpServiceServer) SendOrgSignUp(context.Context, *OrgSignUp) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOrgSignUp not implemented")
}

func RegisterOrgSignUpServiceServer(s *grpc.Server, srv OrgSignUpServiceServer) {
	s.RegisterService(&_OrgSignUpService_serviceDesc, srv)
}

func _OrgSignUpService_SendOrgSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgSignUpServiceServer).SendOrgSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrgSignUpService/SendOrgSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgSignUpServiceServer).SendOrgSignUp(ctx, req.(*OrgSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrgSignUpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OrgSignUpService",
	HandlerType: (*OrgSignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOrgSignUp",
			Handler:    _OrgSignUpService_SendOrgSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// CheckUserSignUpServiceClient is the client API for CheckUserSignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckUserSignUpServiceClient interface {
	CheckUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type checkUserSignUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckUserSignUpServiceClient(cc grpc.ClientConnInterface) CheckUserSignUpServiceClient {
	return &checkUserSignUpServiceClient{cc}
}

func (c *checkUserSignUpServiceClient) CheckUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.CheckUserSignUpService/CheckUserSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckUserSignUpServiceServer is the server API for CheckUserSignUpService service.
type CheckUserSignUpServiceServer interface {
	CheckUserSignUp(context.Context, *UserSignUp) (*GlobalSuccessReply, error)
}

// UnimplementedCheckUserSignUpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCheckUserSignUpServiceServer struct {
}

func (*UnimplementedCheckUserSignUpServiceServer) CheckUserSignUp(context.Context, *UserSignUp) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserSignUp not implemented")
}

func RegisterCheckUserSignUpServiceServer(s *grpc.Server, srv CheckUserSignUpServiceServer) {
	s.RegisterService(&_CheckUserSignUpService_serviceDesc, srv)
}

func _CheckUserSignUpService_CheckUserSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckUserSignUpServiceServer).CheckUserSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CheckUserSignUpService/CheckUserSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckUserSignUpServiceServer).CheckUserSignUp(ctx, req.(*UserSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckUserSignUpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CheckUserSignUpService",
	HandlerType: (*CheckUserSignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserSignUp",
			Handler:    _CheckUserSignUpService_CheckUserSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// CheckOrgSignUpServiceClient is the client API for CheckOrgSignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckOrgSignUpServiceClient interface {
	CheckOrgSignUp(ctx context.Context, in *OrgSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type checkOrgSignUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckOrgSignUpServiceClient(cc grpc.ClientConnInterface) CheckOrgSignUpServiceClient {
	return &checkOrgSignUpServiceClient{cc}
}

func (c *checkOrgSignUpServiceClient) CheckOrgSignUp(ctx context.Context, in *OrgSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.CheckOrgSignUpService/CheckOrgSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckOrgSignUpServiceServer is the server API for CheckOrgSignUpService service.
type CheckOrgSignUpServiceServer interface {
	CheckOrgSignUp(context.Context, *OrgSignUp) (*GlobalSuccessReply, error)
}

// UnimplementedCheckOrgSignUpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCheckOrgSignUpServiceServer struct {
}

func (*UnimplementedCheckOrgSignUpServiceServer) CheckOrgSignUp(context.Context, *OrgSignUp) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOrgSignUp not implemented")
}

func RegisterCheckOrgSignUpServiceServer(s *grpc.Server, srv CheckOrgSignUpServiceServer) {
	s.RegisterService(&_CheckOrgSignUpService_serviceDesc, srv)
}

func _CheckOrgSignUpService_CheckOrgSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckOrgSignUpServiceServer).CheckOrgSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CheckOrgSignUpService/CheckOrgSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckOrgSignUpServiceServer).CheckOrgSignUp(ctx, req.(*OrgSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckOrgSignUpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CheckOrgSignUpService",
	HandlerType: (*CheckOrgSignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckOrgSignUp",
			Handler:    _CheckOrgSignUpService_CheckOrgSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// ResendEmailAuthServiceClient is the client API for ResendEmailAuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResendEmailAuthServiceClient interface {
	ResendEmailAuth(ctx context.Context, in *ResendEmailAuthMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type resendEmailAuthServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResendEmailAuthServiceClient(cc grpc.ClientConnInterface) ResendEmailAuthServiceClient {
	return &resendEmailAuthServiceClient{cc}
}

func (c *resendEmailAuthServiceClient) ResendEmailAuth(ctx context.Context, in *ResendEmailAuthMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.ResendEmailAuthService/ResendEmailAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResendEmailAuthServiceServer is the server API for ResendEmailAuthService service.
type ResendEmailAuthServiceServer interface {
	ResendEmailAuth(context.Context, *ResendEmailAuthMsg) (*GlobalSuccessReply, error)
}

// UnimplementedResendEmailAuthServiceServer can be embedded to have forward compatible implementations.
type UnimplementedResendEmailAuthServiceServer struct {
}

func (*UnimplementedResendEmailAuthServiceServer) ResendEmailAuth(context.Context, *ResendEmailAuthMsg) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendEmailAuth not implemented")
}

func RegisterResendEmailAuthServiceServer(s *grpc.Server, srv ResendEmailAuthServiceServer) {
	s.RegisterService(&_ResendEmailAuthService_serviceDesc, srv)
}

func _ResendEmailAuthService_ResendEmailAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResendEmailAuthMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResendEmailAuthServiceServer).ResendEmailAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ResendEmailAuthService/ResendEmailAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResendEmailAuthServiceServer).ResendEmailAuth(ctx, req.(*ResendEmailAuthMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResendEmailAuthService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ResendEmailAuthService",
	HandlerType: (*ResendEmailAuthServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResendEmailAuth",
			Handler:    _ResendEmailAuthService_ResendEmailAuth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// AuthLoginServiceClient is the client API for AuthLoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthLoginServiceClient interface {
	AuthLogin(ctx context.Context, in *Login, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type authLoginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthLoginServiceClient(cc grpc.ClientConnInterface) AuthLoginServiceClient {
	return &authLoginServiceClient{cc}
}

func (c *authLoginServiceClient) AuthLogin(ctx context.Context, in *Login, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.AuthLoginService/AuthLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthLoginServiceServer is the server API for AuthLoginService service.
type AuthLoginServiceServer interface {
	AuthLogin(context.Context, *Login) (*GlobalSuccessReply, error)
}

// UnimplementedAuthLoginServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthLoginServiceServer struct {
}

func (*UnimplementedAuthLoginServiceServer) AuthLogin(context.Context, *Login) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogin not implemented")
}

func RegisterAuthLoginServiceServer(s *grpc.Server, srv AuthLoginServiceServer) {
	s.RegisterService(&_AuthLoginService_serviceDesc, srv)
}

func _AuthLoginService_AuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthLoginServiceServer).AuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthLoginService/AuthLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthLoginServiceServer).AuthLogin(ctx, req.(*Login))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthLoginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthLoginService",
	HandlerType: (*AuthLoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthLogin",
			Handler:    _AuthLoginService_AuthLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// BeginTransactionWHServiceClient is the client API for BeginTransactionWHService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeginTransactionWHServiceClient interface {
	BeginTransactionWH(ctx context.Context, in *TransactionItemID, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type beginTransactionWHServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeginTransactionWHServiceClient(cc grpc.ClientConnInterface) BeginTransactionWHServiceClient {
	return &beginTransactionWHServiceClient{cc}
}

func (c *beginTransactionWHServiceClient) BeginTransactionWH(ctx context.Context, in *TransactionItemID, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.BeginTransactionWHService/BeginTransactionWH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeginTransactionWHServiceServer is the server API for BeginTransactionWHService service.
type BeginTransactionWHServiceServer interface {
	BeginTransactionWH(context.Context, *TransactionItemID) (*GlobalSuccessReply, error)
}

// UnimplementedBeginTransactionWHServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBeginTransactionWHServiceServer struct {
}

func (*UnimplementedBeginTransactionWHServiceServer) BeginTransactionWH(context.Context, *TransactionItemID) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTransactionWH not implemented")
}

func RegisterBeginTransactionWHServiceServer(s *grpc.Server, srv BeginTransactionWHServiceServer) {
	s.RegisterService(&_BeginTransactionWHService_serviceDesc, srv)
}

func _BeginTransactionWHService_BeginTransactionWH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeginTransactionWHServiceServer).BeginTransactionWH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BeginTransactionWHService/BeginTransactionWH",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeginTransactionWHServiceServer).BeginTransactionWH(ctx, req.(*TransactionItemID))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeginTransactionWHService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BeginTransactionWHService",
	HandlerType: (*BeginTransactionWHServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginTransactionWH",
			Handler:    _BeginTransactionWHService_BeginTransactionWH_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// ConfirmTransferServiceClient is the client API for ConfirmTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfirmTransferServiceClient interface {
	ConfirmTransfer(ctx context.Context, in *StripeChargeID, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type confirmTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfirmTransferServiceClient(cc grpc.ClientConnInterface) ConfirmTransferServiceClient {
	return &confirmTransferServiceClient{cc}
}

func (c *confirmTransferServiceClient) ConfirmTransfer(ctx context.Context, in *StripeChargeID, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.ConfirmTransferService/ConfirmTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfirmTransferServiceServer is the server API for ConfirmTransferService service.
type ConfirmTransferServiceServer interface {
	ConfirmTransfer(context.Context, *StripeChargeID) (*GlobalSuccessReply, error)
}

// UnimplementedConfirmTransferServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConfirmTransferServiceServer struct {
}

func (*UnimplementedConfirmTransferServiceServer) ConfirmTransfer(context.Context, *StripeChargeID) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTransfer not implemented")
}

func RegisterConfirmTransferServiceServer(s *grpc.Server, srv ConfirmTransferServiceServer) {
	s.RegisterService(&_ConfirmTransferService_serviceDesc, srv)
}

func _ConfirmTransferService_ConfirmTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StripeChargeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmTransferServiceServer).ConfirmTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConfirmTransferService/ConfirmTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmTransferServiceServer).ConfirmTransfer(ctx, req.(*StripeChargeID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfirmTransferService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ConfirmTransferService",
	HandlerType: (*ConfirmTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfirmTransfer",
			Handler:    _ConfirmTransferService_ConfirmTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// SearchOrgNameServiceClient is the client API for SearchOrgNameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchOrgNameServiceClient interface {
	SearchOrgName(ctx context.Context, in *OrgName, opts ...grpc.CallOption) (*OrgNameReply, error)
}

type searchOrgNameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchOrgNameServiceClient(cc grpc.ClientConnInterface) SearchOrgNameServiceClient {
	return &searchOrgNameServiceClient{cc}
}

func (c *searchOrgNameServiceClient) SearchOrgName(ctx context.Context, in *OrgName, opts ...grpc.CallOption) (*OrgNameReply, error) {
	out := new(OrgNameReply)
	err := c.cc.Invoke(ctx, "/proto.SearchOrgNameService/SearchOrgName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchOrgNameServiceServer is the server API for SearchOrgNameService service.
type SearchOrgNameServiceServer interface {
	SearchOrgName(context.Context, *OrgName) (*OrgNameReply, error)
}

// UnimplementedSearchOrgNameServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSearchOrgNameServiceServer struct {
}

func (*UnimplementedSearchOrgNameServiceServer) SearchOrgName(context.Context, *OrgName) (*OrgNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrgName not implemented")
}

func RegisterSearchOrgNameServiceServer(s *grpc.Server, srv SearchOrgNameServiceServer) {
	s.RegisterService(&_SearchOrgNameService_serviceDesc, srv)
}

func _SearchOrgNameService_SearchOrgName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchOrgNameServiceServer).SearchOrgName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SearchOrgNameService/SearchOrgName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchOrgNameServiceServer).SearchOrgName(ctx, req.(*OrgName))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchOrgNameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SearchOrgNameService",
	HandlerType: (*SearchOrgNameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchOrgName",
			Handler:    _SearchOrgNameService_SearchOrgName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// TransferPDFServiceClient is the client API for TransferPDFService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransferPDFServiceClient interface {
	TransferPDF(ctx context.Context, in *TransferPDFParams, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type transferPDFServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferPDFServiceClient(cc grpc.ClientConnInterface) TransferPDFServiceClient {
	return &transferPDFServiceClient{cc}
}

func (c *transferPDFServiceClient) TransferPDF(ctx context.Context, in *TransferPDFParams, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.TransferPDFService/TransferPDF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferPDFServiceServer is the server API for TransferPDFService service.
type TransferPDFServiceServer interface {
	TransferPDF(context.Context, *TransferPDFParams) (*GlobalSuccessReply, error)
}

// UnimplementedTransferPDFServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTransferPDFServiceServer struct {
}

func (*UnimplementedTransferPDFServiceServer) TransferPDF(context.Context, *TransferPDFParams) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferPDF not implemented")
}

func RegisterTransferPDFServiceServer(s *grpc.Server, srv TransferPDFServiceServer) {
	s.RegisterService(&_TransferPDFService_serviceDesc, srv)
}

func _TransferPDFService_TransferPDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferPDFParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferPDFServiceServer).TransferPDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TransferPDFService/TransferPDF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferPDFServiceServer).TransferPDF(ctx, req.(*TransferPDFParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransferPDFService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TransferPDFService",
	HandlerType: (*TransferPDFServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferPDF",
			Handler:    _TransferPDFService_TransferPDF_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// SaveLogoServiceClient is the client API for SaveLogoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SaveLogoServiceClient interface {
	SaveLogo(ctx context.Context, in *SaveLogoMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type saveLogoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSaveLogoServiceClient(cc grpc.ClientConnInterface) SaveLogoServiceClient {
	return &saveLogoServiceClient{cc}
}

func (c *saveLogoServiceClient) SaveLogo(ctx context.Context, in *SaveLogoMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.SaveLogoService/SaveLogo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SaveLogoServiceServer is the server API for SaveLogoService service.
type SaveLogoServiceServer interface {
	SaveLogo(context.Context, *SaveLogoMsg) (*GlobalSuccessReply, error)
}

// UnimplementedSaveLogoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSaveLogoServiceServer struct {
}

func (*UnimplementedSaveLogoServiceServer) SaveLogo(context.Context, *SaveLogoMsg) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveLogo not implemented")
}

func RegisterSaveLogoServiceServer(s *grpc.Server, srv SaveLogoServiceServer) {
	s.RegisterService(&_SaveLogoService_serviceDesc, srv)
}

func _SaveLogoService_SaveLogo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveLogoMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SaveLogoServiceServer).SaveLogo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SaveLogoService/SaveLogo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SaveLogoServiceServer).SaveLogo(ctx, req.(*SaveLogoMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _SaveLogoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SaveLogoService",
	HandlerType: (*SaveLogoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveLogo",
			Handler:    _SaveLogoService_SaveLogo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// GetTransactionsServiceClient is the client API for GetTransactionsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetTransactionsServiceClient interface {
	GetTransactions(ctx context.Context, in *GetTransactionsMsg, opts ...grpc.CallOption) (*GetTransactionsMsgReply, error)
}

type getTransactionsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetTransactionsServiceClient(cc grpc.ClientConnInterface) GetTransactionsServiceClient {
	return &getTransactionsServiceClient{cc}
}

func (c *getTransactionsServiceClient) GetTransactions(ctx context.Context, in *GetTransactionsMsg, opts ...grpc.CallOption) (*GetTransactionsMsgReply, error) {
	out := new(GetTransactionsMsgReply)
	err := c.cc.Invoke(ctx, "/proto.GetTransactionsService/GetTransactions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetTransactionsServiceServer is the server API for GetTransactionsService service.
type GetTransactionsServiceServer interface {
	GetTransactions(context.Context, *GetTransactionsMsg) (*GetTransactionsMsgReply, error)
}

// UnimplementedGetTransactionsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGetTransactionsServiceServer struct {
}

func (*UnimplementedGetTransactionsServiceServer) GetTransactions(context.Context, *GetTransactionsMsg) (*GetTransactionsMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTransactions not implemented")
}

func RegisterGetTransactionsServiceServer(s *grpc.Server, srv GetTransactionsServiceServer) {
	s.RegisterService(&_GetTransactionsService_serviceDesc, srv)
}

func _GetTransactionsService_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionsMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetTransactionsServiceServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GetTransactionsService/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetTransactionsServiceServer).GetTransactions(ctx, req.(*GetTransactionsMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetTransactionsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GetTransactionsService",
	HandlerType: (*GetTransactionsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTransactions",
			Handler:    _GetTransactionsService_GetTransactions_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// UpdateThresholdServiceClient is the client API for UpdateThresholdService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateThresholdServiceClient interface {
	UpdateThreshold(ctx context.Context, in *UpdateThresholdMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type updateThresholdServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateThresholdServiceClient(cc grpc.ClientConnInterface) UpdateThresholdServiceClient {
	return &updateThresholdServiceClient{cc}
}

func (c *updateThresholdServiceClient) UpdateThreshold(ctx context.Context, in *UpdateThresholdMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.UpdateThresholdService/UpdateThreshold", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateThresholdServiceServer is the server API for UpdateThresholdService service.
type UpdateThresholdServiceServer interface {
	UpdateThreshold(context.Context, *UpdateThresholdMsg) (*GlobalSuccessReply, error)
}

// UnimplementedUpdateThresholdServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUpdateThresholdServiceServer struct {
}

func (*UnimplementedUpdateThresholdServiceServer) UpdateThreshold(context.Context, *UpdateThresholdMsg) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateThreshold not implemented")
}

func RegisterUpdateThresholdServiceServer(s *grpc.Server, srv UpdateThresholdServiceServer) {
	s.RegisterService(&_UpdateThresholdService_serviceDesc, srv)
}

func _UpdateThresholdService_UpdateThreshold_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateThresholdMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateThresholdServiceServer).UpdateThreshold(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UpdateThresholdService/UpdateThreshold",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateThresholdServiceServer).UpdateThreshold(ctx, req.(*UpdateThresholdMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateThresholdService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UpdateThresholdService",
	HandlerType: (*UpdateThresholdServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateThreshold",
			Handler:    _UpdateThresholdService_UpdateThreshold_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// GetUsersOrgInfoServiceClient is the client API for GetUsersOrgInfoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetUsersOrgInfoServiceClient interface {
	GetUsersOrgInfo(ctx context.Context, in *UserToken, opts ...grpc.CallOption) (*UsersOrgInfoReply, error)
}

type getUsersOrgInfoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetUsersOrgInfoServiceClient(cc grpc.ClientConnInterface) GetUsersOrgInfoServiceClient {
	return &getUsersOrgInfoServiceClient{cc}
}

func (c *getUsersOrgInfoServiceClient) GetUsersOrgInfo(ctx context.Context, in *UserToken, opts ...grpc.CallOption) (*UsersOrgInfoReply, error) {
	out := new(UsersOrgInfoReply)
	err := c.cc.Invoke(ctx, "/proto.GetUsersOrgInfoService/GetUsersOrgInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetUsersOrgInfoServiceServer is the server API for GetUsersOrgInfoService service.
type GetUsersOrgInfoServiceServer interface {
	GetUsersOrgInfo(context.Context, *UserToken) (*UsersOrgInfoReply, error)
}

// UnimplementedGetUsersOrgInfoServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGetUsersOrgInfoServiceServer struct {
}

func (*UnimplementedGetUsersOrgInfoServiceServer) GetUsersOrgInfo(context.Context, *UserToken) (*UsersOrgInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersOrgInfo not implemented")
}

func RegisterGetUsersOrgInfoServiceServer(s *grpc.Server, srv GetUsersOrgInfoServiceServer) {
	s.RegisterService(&_GetUsersOrgInfoService_serviceDesc, srv)
}

func _GetUsersOrgInfoService_GetUsersOrgInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUsersOrgInfoServiceServer).GetUsersOrgInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GetUsersOrgInfoService/GetUsersOrgInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUsersOrgInfoServiceServer).GetUsersOrgInfo(ctx, req.(*UserToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetUsersOrgInfoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GetUsersOrgInfoService",
	HandlerType: (*GetUsersOrgInfoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsersOrgInfo",
			Handler:    _GetUsersOrgInfoService_GetUsersOrgInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// GetUsersTotalsServiceClient is the client API for GetUsersTotalsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetUsersTotalsServiceClient interface {
	GetUsersTotals(ctx context.Context, in *UserToken, opts ...grpc.CallOption) (*UsersTotalsReply, error)
}

type getUsersTotalsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetUsersTotalsServiceClient(cc grpc.ClientConnInterface) GetUsersTotalsServiceClient {
	return &getUsersTotalsServiceClient{cc}
}

func (c *getUsersTotalsServiceClient) GetUsersTotals(ctx context.Context, in *UserToken, opts ...grpc.CallOption) (*UsersTotalsReply, error) {
	out := new(UsersTotalsReply)
	err := c.cc.Invoke(ctx, "/proto.GetUsersTotalsService/GetUsersTotals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetUsersTotalsServiceServer is the server API for GetUsersTotalsService service.
type GetUsersTotalsServiceServer interface {
	GetUsersTotals(context.Context, *UserToken) (*UsersTotalsReply, error)
}

// UnimplementedGetUsersTotalsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGetUsersTotalsServiceServer struct {
}

func (*UnimplementedGetUsersTotalsServiceServer) GetUsersTotals(context.Context, *UserToken) (*UsersTotalsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersTotals not implemented")
}

func RegisterGetUsersTotalsServiceServer(s *grpc.Server, srv GetUsersTotalsServiceServer) {
	s.RegisterService(&_GetUsersTotalsService_serviceDesc, srv)
}

func _GetUsersTotalsService_GetUsersTotals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUsersTotalsServiceServer).GetUsersTotals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GetUsersTotalsService/GetUsersTotals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUsersTotalsServiceServer).GetUsersTotals(ctx, req.(*UserToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetUsersTotalsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GetUsersTotalsService",
	HandlerType: (*GetUsersTotalsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsersTotals",
			Handler:    _GetUsersTotalsService_GetUsersTotals_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// GetUsersProfileServiceClient is the client API for GetUsersProfileService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GetUsersProfileServiceClient interface {
	GetUsersProfile(ctx context.Context, in *UserToken, opts ...grpc.CallOption) (*UsersProfileReply, error)
}

type getUsersProfileServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGetUsersProfileServiceClient(cc grpc.ClientConnInterface) GetUsersProfileServiceClient {
	return &getUsersProfileServiceClient{cc}
}

func (c *getUsersProfileServiceClient) GetUsersProfile(ctx context.Context, in *UserToken, opts ...grpc.CallOption) (*UsersProfileReply, error) {
	out := new(UsersProfileReply)
	err := c.cc.Invoke(ctx, "/proto.GetUsersProfileService/GetUsersProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetUsersProfileServiceServer is the server API for GetUsersProfileService service.
type GetUsersProfileServiceServer interface {
	GetUsersProfile(context.Context, *UserToken) (*UsersProfileReply, error)
}

// UnimplementedGetUsersProfileServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGetUsersProfileServiceServer struct {
}

func (*UnimplementedGetUsersProfileServiceServer) GetUsersProfile(context.Context, *UserToken) (*UsersProfileReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUsersProfile not implemented")
}

func RegisterGetUsersProfileServiceServer(s *grpc.Server, srv GetUsersProfileServiceServer) {
	s.RegisterService(&_GetUsersProfileService_serviceDesc, srv)
}

func _GetUsersProfileService_GetUsersProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetUsersProfileServiceServer).GetUsersProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GetUsersProfileService/GetUsersProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetUsersProfileServiceServer).GetUsersProfile(ctx, req.(*UserToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _GetUsersProfileService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GetUsersProfileService",
	HandlerType: (*GetUsersProfileServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUsersProfile",
			Handler:    _GetUsersProfileService_GetUsersProfile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// DeleteUsersBAServiceClient is the client API for DeleteUsersBAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeleteUsersBAServiceClient interface {
	DeleteUsersBA(ctx context.Context, in *DeleteUsersBAMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type deleteUsersBAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDeleteUsersBAServiceClient(cc grpc.ClientConnInterface) DeleteUsersBAServiceClient {
	return &deleteUsersBAServiceClient{cc}
}

func (c *deleteUsersBAServiceClient) DeleteUsersBA(ctx context.Context, in *DeleteUsersBAMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.DeleteUsersBAService/DeleteUsersBA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DeleteUsersBAServiceServer is the server API for DeleteUsersBAService service.
type DeleteUsersBAServiceServer interface {
	DeleteUsersBA(context.Context, *DeleteUsersBAMsg) (*GlobalSuccessReply, error)
}

// UnimplementedDeleteUsersBAServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeleteUsersBAServiceServer struct {
}

func (*UnimplementedDeleteUsersBAServiceServer) DeleteUsersBA(context.Context, *DeleteUsersBAMsg) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUsersBA not implemented")
}

func RegisterDeleteUsersBAServiceServer(s *grpc.Server, srv DeleteUsersBAServiceServer) {
	s.RegisterService(&_DeleteUsersBAService_serviceDesc, srv)
}

func _DeleteUsersBAService_DeleteUsersBA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUsersBAMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeleteUsersBAServiceServer).DeleteUsersBA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.DeleteUsersBAService/DeleteUsersBA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeleteUsersBAServiceServer).DeleteUsersBA(ctx, req.(*DeleteUsersBAMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeleteUsersBAService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.DeleteUsersBAService",
	HandlerType: (*DeleteUsersBAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DeleteUsersBA",
			Handler:    _DeleteUsersBAService_DeleteUsersBA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// UpdateUsersBAServiceClient is the client API for UpdateUsersBAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateUsersBAServiceClient interface {
	UpdateUsersBA(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type updateUsersBAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateUsersBAServiceClient(cc grpc.ClientConnInterface) UpdateUsersBAServiceClient {
	return &updateUsersBAServiceClient{cc}
}

func (c *updateUsersBAServiceClient) UpdateUsersBA(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.UpdateUsersBAService/UpdateUsersBA", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateUsersBAServiceServer is the server API for UpdateUsersBAService service.
type UpdateUsersBAServiceServer interface {
	UpdateUsersBA(context.Context, *UserSignUp) (*GlobalSuccessReply, error)
}

// UnimplementedUpdateUsersBAServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUpdateUsersBAServiceServer struct {
}

func (*UnimplementedUpdateUsersBAServiceServer) UpdateUsersBA(context.Context, *UserSignUp) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUsersBA not implemented")
}

func RegisterUpdateUsersBAServiceServer(s *grpc.Server, srv UpdateUsersBAServiceServer) {
	s.RegisterService(&_UpdateUsersBAService_serviceDesc, srv)
}

func _UpdateUsersBAService_UpdateUsersBA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateUsersBAServiceServer).UpdateUsersBA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UpdateUsersBAService/UpdateUsersBA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateUsersBAServiceServer).UpdateUsersBA(ctx, req.(*UserSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateUsersBAService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UpdateUsersBAService",
	HandlerType: (*UpdateUsersBAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUsersBA",
			Handler:    _UpdateUsersBAService_UpdateUsersBA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// ValidNewAccServiceClient is the client API for ValidNewAccService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ValidNewAccServiceClient interface {
	ValidNewAcc(ctx context.Context, in *ValidNewAccMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type validNewAccServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidNewAccServiceClient(cc grpc.ClientConnInterface) ValidNewAccServiceClient {
	return &validNewAccServiceClient{cc}
}

func (c *validNewAccServiceClient) ValidNewAcc(ctx context.Context, in *ValidNewAccMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.ValidNewAccService/ValidNewAcc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidNewAccServiceServer is the server API for ValidNewAccService service.
type ValidNewAccServiceServer interface {
	ValidNewAcc(context.Context, *ValidNewAccMsg) (*GlobalSuccessReply, error)
}

// UnimplementedValidNewAccServiceServer can be embedded to have forward compatible implementations.
type UnimplementedValidNewAccServiceServer struct {
}

func (*UnimplementedValidNewAccServiceServer) ValidNewAcc(context.Context, *ValidNewAccMsg) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidNewAcc not implemented")
}

func RegisterValidNewAccServiceServer(s *grpc.Server, srv ValidNewAccServiceServer) {
	s.RegisterService(&_ValidNewAccService_serviceDesc, srv)
}

func _ValidNewAccService_ValidNewAcc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidNewAccMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidNewAccServiceServer).ValidNewAcc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ValidNewAccService/ValidNewAcc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidNewAccServiceServer).ValidNewAcc(ctx, req.(*ValidNewAccMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ValidNewAccService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ValidNewAccService",
	HandlerType: (*ValidNewAccServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidNewAcc",
			Handler:    _ValidNewAccService_ValidNewAcc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// ValidPassServiceClient is the client API for ValidPassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ValidPassServiceClient interface {
	ValidPass(ctx context.Context, in *ValidPassMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type validPassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidPassServiceClient(cc grpc.ClientConnInterface) ValidPassServiceClient {
	return &validPassServiceClient{cc}
}

func (c *validPassServiceClient) ValidPass(ctx context.Context, in *ValidPassMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.ValidPassService/ValidPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidPassServiceServer is the server API for ValidPassService service.
type ValidPassServiceServer interface {
	ValidPass(context.Context, *ValidPassMsg) (*GlobalSuccessReply, error)
}

// UnimplementedValidPassServiceServer can be embedded to have forward compatible implementations.
type UnimplementedValidPassServiceServer struct {
}

func (*UnimplementedValidPassServiceServer) ValidPass(context.Context, *ValidPassMsg) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidPass not implemented")
}

func RegisterValidPassServiceServer(s *grpc.Server, srv ValidPassServiceServer) {
	s.RegisterService(&_ValidPassService_serviceDesc, srv)
}

func _ValidPassService_ValidPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidPassMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidPassServiceServer).ValidPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ValidPassService/ValidPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidPassServiceServer).ValidPass(ctx, req.(*ValidPassMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ValidPassService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ValidPassService",
	HandlerType: (*ValidPassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidPass",
			Handler:    _ValidPassService_ValidPass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// ValidKeyServiceClient is the client API for ValidKeyService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ValidKeyServiceClient interface {
	ValidKey(ctx context.Context, in *ValidPassMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type validKeyServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewValidKeyServiceClient(cc grpc.ClientConnInterface) ValidKeyServiceClient {
	return &validKeyServiceClient{cc}
}

func (c *validKeyServiceClient) ValidKey(ctx context.Context, in *ValidPassMsg, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.ValidKeyService/ValidKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ValidKeyServiceServer is the server API for ValidKeyService service.
type ValidKeyServiceServer interface {
	ValidKey(context.Context, *ValidPassMsg) (*GlobalSuccessReply, error)
}

// UnimplementedValidKeyServiceServer can be embedded to have forward compatible implementations.
type UnimplementedValidKeyServiceServer struct {
}

func (*UnimplementedValidKeyServiceServer) ValidKey(context.Context, *ValidPassMsg) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidKey not implemented")
}

func RegisterValidKeyServiceServer(s *grpc.Server, srv ValidKeyServiceServer) {
	s.RegisterService(&_ValidKeyService_serviceDesc, srv)
}

func _ValidKeyService_ValidKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ValidPassMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ValidKeyServiceServer).ValidKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ValidKeyService/ValidKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ValidKeyServiceServer).ValidKey(ctx, req.(*ValidPassMsg))
	}
	return interceptor(ctx, in, info, handler)
}

var _ValidKeyService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ValidKeyService",
	HandlerType: (*ValidKeyServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ValidKey",
			Handler:    _ValidKeyService_ValidKey_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// SendForgotPassServiceClient is the client API for SendForgotPassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SendForgotPassServiceClient interface {
	SendForgotPass(ctx context.Context, in *Login, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type sendForgotPassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSendForgotPassServiceClient(cc grpc.ClientConnInterface) SendForgotPassServiceClient {
	return &sendForgotPassServiceClient{cc}
}

func (c *sendForgotPassServiceClient) SendForgotPass(ctx context.Context, in *Login, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.SendForgotPassService/SendForgotPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SendForgotPassServiceServer is the server API for SendForgotPassService service.
type SendForgotPassServiceServer interface {
	SendForgotPass(context.Context, *Login) (*GlobalSuccessReply, error)
}

// UnimplementedSendForgotPassServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSendForgotPassServiceServer struct {
}

func (*UnimplementedSendForgotPassServiceServer) SendForgotPass(context.Context, *Login) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendForgotPass not implemented")
}

func RegisterSendForgotPassServiceServer(s *grpc.Server, srv SendForgotPassServiceServer) {
	s.RegisterService(&_SendForgotPassService_serviceDesc, srv)
}

func _SendForgotPassService_SendForgotPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SendForgotPassServiceServer).SendForgotPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SendForgotPassService/SendForgotPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SendForgotPassServiceServer).SendForgotPass(ctx, req.(*Login))
	}
	return interceptor(ctx, in, info, handler)
}

var _SendForgotPassService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SendForgotPassService",
	HandlerType: (*SendForgotPassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendForgotPass",
			Handler:    _SendForgotPassService_SendForgotPass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// ForgotPassServiceClient is the client API for ForgotPassService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ForgotPassServiceClient interface {
	ForgotPass(ctx context.Context, in *Login, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type forgotPassServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewForgotPassServiceClient(cc grpc.ClientConnInterface) ForgotPassServiceClient {
	return &forgotPassServiceClient{cc}
}

func (c *forgotPassServiceClient) ForgotPass(ctx context.Context, in *Login, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.ForgotPassService/ForgotPass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ForgotPassServiceServer is the server API for ForgotPassService service.
type ForgotPassServiceServer interface {
	ForgotPass(context.Context, *Login) (*GlobalSuccessReply, error)
}

// UnimplementedForgotPassServiceServer can be embedded to have forward compatible implementations.
type UnimplementedForgotPassServiceServer struct {
}

func (*UnimplementedForgotPassServiceServer) ForgotPass(context.Context, *Login) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForgotPass not implemented")
}

func RegisterForgotPassServiceServer(s *grpc.Server, srv ForgotPassServiceServer) {
	s.RegisterService(&_ForgotPassService_serviceDesc, srv)
}

func _ForgotPassService_ForgotPass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ForgotPassServiceServer).ForgotPass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ForgotPassService/ForgotPass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ForgotPassServiceServer).ForgotPass(ctx, req.(*Login))
	}
	return interceptor(ctx, in, info, handler)
}

var _ForgotPassService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ForgotPassService",
	HandlerType: (*ForgotPassServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ForgotPass",
			Handler:    _ForgotPassService_ForgotPass_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// CheckOrgTosAcceptedServiceClient is the client API for CheckOrgTosAcceptedService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckOrgTosAcceptedServiceClient interface {
	CheckOrgTosAccepted(ctx context.Context, in *OrgToken, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type checkOrgTosAcceptedServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckOrgTosAcceptedServiceClient(cc grpc.ClientConnInterface) CheckOrgTosAcceptedServiceClient {
	return &checkOrgTosAcceptedServiceClient{cc}
}

func (c *checkOrgTosAcceptedServiceClient) CheckOrgTosAccepted(ctx context.Context, in *OrgToken, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.CheckOrgTosAcceptedService/CheckOrgTosAccepted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckOrgTosAcceptedServiceServer is the server API for CheckOrgTosAcceptedService service.
type CheckOrgTosAcceptedServiceServer interface {
	CheckOrgTosAccepted(context.Context, *OrgToken) (*GlobalSuccessReply, error)
}

// UnimplementedCheckOrgTosAcceptedServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCheckOrgTosAcceptedServiceServer struct {
}

func (*UnimplementedCheckOrgTosAcceptedServiceServer) CheckOrgTosAccepted(context.Context, *OrgToken) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOrgTosAccepted not implemented")
}

func RegisterCheckOrgTosAcceptedServiceServer(s *grpc.Server, srv CheckOrgTosAcceptedServiceServer) {
	s.RegisterService(&_CheckOrgTosAcceptedService_serviceDesc, srv)
}

func _CheckOrgTosAcceptedService_CheckOrgTosAccepted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckOrgTosAcceptedServiceServer).CheckOrgTosAccepted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CheckOrgTosAcceptedService/CheckOrgTosAccepted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckOrgTosAcceptedServiceServer).CheckOrgTosAccepted(ctx, req.(*OrgToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckOrgTosAcceptedService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CheckOrgTosAcceptedService",
	HandlerType: (*CheckOrgTosAcceptedServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckOrgTosAccepted",
			Handler:    _CheckOrgTosAcceptedService_CheckOrgTosAccepted_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// ResendOrgsTosServiceClient is the client API for ResendOrgsTosService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ResendOrgsTosServiceClient interface {
	ResendOrgsTos(ctx context.Context, in *OrgToken, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type resendOrgsTosServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewResendOrgsTosServiceClient(cc grpc.ClientConnInterface) ResendOrgsTosServiceClient {
	return &resendOrgsTosServiceClient{cc}
}

func (c *resendOrgsTosServiceClient) ResendOrgsTos(ctx context.Context, in *OrgToken, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.ResendOrgsTosService/ResendOrgsTos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResendOrgsTosServiceServer is the server API for ResendOrgsTosService service.
type ResendOrgsTosServiceServer interface {
	ResendOrgsTos(context.Context, *OrgToken) (*GlobalSuccessReply, error)
}

// UnimplementedResendOrgsTosServiceServer can be embedded to have forward compatible implementations.
type UnimplementedResendOrgsTosServiceServer struct {
}

func (*UnimplementedResendOrgsTosServiceServer) ResendOrgsTos(context.Context, *OrgToken) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResendOrgsTos not implemented")
}

func RegisterResendOrgsTosServiceServer(s *grpc.Server, srv ResendOrgsTosServiceServer) {
	s.RegisterService(&_ResendOrgsTosService_serviceDesc, srv)
}

func _ResendOrgsTosService_ResendOrgsTos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgToken)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResendOrgsTosServiceServer).ResendOrgsTos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ResendOrgsTosService/ResendOrgsTos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResendOrgsTosServiceServer).ResendOrgsTos(ctx, req.(*OrgToken))
	}
	return interceptor(ctx, in, info, handler)
}

var _ResendOrgsTosService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ResendOrgsTosService",
	HandlerType: (*ResendOrgsTosServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ResendOrgsTos",
			Handler:    _ResendOrgsTosService_ResendOrgsTos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}
