// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.3
// source: db.proto

//option go_package = "github.com/chezky/changeproto/db_service";

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GlobalSuccessReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *GlobalSuccessReply) Reset() {
	*x = GlobalSuccessReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalSuccessReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalSuccessReply) ProtoMessage() {}

func (x *GlobalSuccessReply) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalSuccessReply.ProtoReflect.Descriptor instead.
func (*GlobalSuccessReply) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{0}
}

func (x *GlobalSuccessReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ReadUserEmail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Id    string `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ReadUserEmail) Reset() {
	*x = ReadUserEmail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadUserEmail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadUserEmail) ProtoMessage() {}

func (x *ReadUserEmail) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadUserEmail.ProtoReflect.Descriptor instead.
func (*ReadUserEmail) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{1}
}

func (x *ReadUserEmail) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *ReadUserEmail) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

type ReadUserEmailReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *ReadUserEmailReply) Reset() {
	*x = ReadUserEmailReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReadUserEmailReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReadUserEmailReply) ProtoMessage() {}

func (x *ReadUserEmailReply) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReadUserEmailReply.ProtoReflect.Descriptor instead.
func (*ReadUserEmailReply) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{2}
}

func (x *ReadUserEmailReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UserSignUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email            string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password         string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Dob              int64  `protobuf:"varint,3,opt,name=dob,proto3" json:"dob,omitempty"`
	Usertoken        string `protobuf:"bytes,4,opt,name=usertoken,proto3" json:"usertoken,omitempty"`
	Plaidpublictoken string `protobuf:"bytes,5,opt,name=plaidpublictoken,proto3" json:"plaidpublictoken,omitempty"`
	Plaidaccountid   string `protobuf:"bytes,6,opt,name=plaidaccountid,proto3" json:"plaidaccountid,omitempty"`
	Key              int32  `protobuf:"varint,8,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *UserSignUp) Reset() {
	*x = UserSignUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSignUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSignUp) ProtoMessage() {}

func (x *UserSignUp) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSignUp.ProtoReflect.Descriptor instead.
func (*UserSignUp) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{3}
}

func (x *UserSignUp) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserSignUp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserSignUp) GetDob() int64 {
	if x != nil {
		return x.Dob
	}
	return 0
}

func (x *UserSignUp) GetUsertoken() string {
	if x != nil {
		return x.Usertoken
	}
	return ""
}

func (x *UserSignUp) GetPlaidpublictoken() string {
	if x != nil {
		return x.Plaidpublictoken
	}
	return ""
}

func (x *UserSignUp) GetPlaidaccountid() string {
	if x != nil {
		return x.Plaidaccountid
	}
	return ""
}

func (x *UserSignUp) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

type CheckUserSignUpReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Plaidpublictoken string `protobuf:"bytes,2,opt,name=plaidpublictoken,proto3" json:"plaidpublictoken,omitempty"`
}

func (x *CheckUserSignUpReply) Reset() {
	*x = CheckUserSignUpReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckUserSignUpReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckUserSignUpReply) ProtoMessage() {}

func (x *CheckUserSignUpReply) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckUserSignUpReply.ProtoReflect.Descriptor instead.
func (*CheckUserSignUpReply) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{4}
}

func (x *CheckUserSignUpReply) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CheckUserSignUpReply) GetPlaidpublictoken() string {
	if x != nil {
		return x.Plaidpublictoken
	}
	return ""
}

type UpUserSignUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id               int32  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Plaidaccesstoken string `protobuf:"bytes,2,opt,name=plaidaccesstoken,proto3" json:"plaidaccesstoken,omitempty"`
	Itemid           string `protobuf:"bytes,3,opt,name=itemid,proto3" json:"itemid,omitempty"`
	Stripetoken      string `protobuf:"bytes,4,opt,name=stripetoken,proto3" json:"stripetoken,omitempty"`
	Customerid       string `protobuf:"bytes,5,opt,name=customerid,proto3" json:"customerid,omitempty"`
}

func (x *UpUserSignUp) Reset() {
	*x = UpUserSignUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpUserSignUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpUserSignUp) ProtoMessage() {}

func (x *UpUserSignUp) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpUserSignUp.ProtoReflect.Descriptor instead.
func (*UpUserSignUp) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{5}
}

func (x *UpUserSignUp) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *UpUserSignUp) GetPlaidaccesstoken() string {
	if x != nil {
		return x.Plaidaccesstoken
	}
	return ""
}

func (x *UpUserSignUp) GetItemid() string {
	if x != nil {
		return x.Itemid
	}
	return ""
}

func (x *UpUserSignUp) GetStripetoken() string {
	if x != nil {
		return x.Stripetoken
	}
	return ""
}

func (x *UpUserSignUp) GetCustomerid() string {
	if x != nil {
		return x.Customerid
	}
	return ""
}

type CheckEmailExists struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Db    string `protobuf:"bytes,2,opt,name=db,proto3" json:"db,omitempty"`
}

func (x *CheckEmailExists) Reset() {
	*x = CheckEmailExists{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckEmailExists) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckEmailExists) ProtoMessage() {}

func (x *CheckEmailExists) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckEmailExists.ProtoReflect.Descriptor instead.
func (*CheckEmailExists) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{6}
}

func (x *CheckEmailExists) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *CheckEmailExists) GetDb() string {
	if x != nil {
		return x.Db
	}
	return ""
}

var File_db_proto protoreflect.FileDescriptor

var file_db_proto_rawDesc = []byte{
	0x0a, 0x08, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0x35, 0x0a, 0x0d, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61,
	0x69, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x61, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x62,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x03, 0x64, 0x6f, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6c, 0x61,
	0x69, 0x64, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x61, 0x63,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70,
	0x6c, 0x61, 0x69, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22,
	0x52, 0x0a, 0x14, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64,
	0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x74, 0x6f,
	0x6b, 0x65, 0x6e, 0x22, 0xa4, 0x01, 0x0a, 0x0c, 0x55, 0x70, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x70, 0x6c, 0x61, 0x69, 0x64, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x70, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x74, 0x72, 0x69, 0x70, 0x65, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x69, 0x64, 0x22, 0x38, 0x0a, 0x10, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x0e, 0x0a, 0x02, 0x64, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x64, 0x62, 0x32, 0x51, 0x0a, 0x14, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72,
	0x45, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x39, 0x0a, 0x04,
	0x53, 0x65, 0x6e, 0x64, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x61, 0x64, 0x55, 0x73, 0x65, 0x72, 0x45, 0x6d, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x55, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x55, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x40, 0x0a, 0x0e,
	0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x11,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x5d,
	0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x43, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x11, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x1a, 0x1b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x5f, 0x0a,
	0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x5c,
	0x0a, 0x17, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x1a,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_db_proto_rawDescOnce sync.Once
	file_db_proto_rawDescData = file_db_proto_rawDesc
)

func file_db_proto_rawDescGZIP() []byte {
	file_db_proto_rawDescOnce.Do(func() {
		file_db_proto_rawDescData = protoimpl.X.CompressGZIP(file_db_proto_rawDescData)
	})
	return file_db_proto_rawDescData
}

var file_db_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_db_proto_goTypes = []interface{}{
	(*GlobalSuccessReply)(nil),   // 0: proto.GlobalSuccessReply
	(*ReadUserEmail)(nil),        // 1: proto.ReadUserEmail
	(*ReadUserEmailReply)(nil),   // 2: proto.ReadUserEmailReply
	(*UserSignUp)(nil),           // 3: proto.UserSignUp
	(*CheckUserSignUpReply)(nil), // 4: proto.CheckUserSignUpReply
	(*UpUserSignUp)(nil),         // 5: proto.UpUserSignUp
	(*CheckEmailExists)(nil),     // 6: proto.CheckEmailExists
}
var file_db_proto_depIdxs = []int32{
	1, // 0: proto.ReadUserEmailService.Send:input_type -> proto.ReadUserEmail
	3, // 1: proto.UserSignUpService.SendUserSignUp:input_type -> proto.UserSignUp
	3, // 2: proto.CheckUserSignUpService.CheckUserSignUp:input_type -> proto.UserSignUp
	5, // 3: proto.UpdateUserSignUpService.UpdateUserSignUp:input_type -> proto.UpUserSignUp
	3, // 4: proto.CheckEmailExistsService.CheckUserSignUp:input_type -> proto.UserSignUp
	2, // 5: proto.ReadUserEmailService.Send:output_type -> proto.ReadUserEmailReply
	0, // 6: proto.UserSignUpService.SendUserSignUp:output_type -> proto.GlobalSuccessReply
	4, // 7: proto.CheckUserSignUpService.CheckUserSignUp:output_type -> proto.CheckUserSignUpReply
	0, // 8: proto.UpdateUserSignUpService.UpdateUserSignUp:output_type -> proto.GlobalSuccessReply
	0, // 9: proto.CheckEmailExistsService.CheckUserSignUp:output_type -> proto.GlobalSuccessReply
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_db_proto_init() }
func file_db_proto_init() {
	if File_db_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_db_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalSuccessReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadUserEmail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReadUserEmailReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSignUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckUserSignUpReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpUserSignUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CheckEmailExists); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_db_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   5,
		},
		GoTypes:           file_db_proto_goTypes,
		DependencyIndexes: file_db_proto_depIdxs,
		MessageInfos:      file_db_proto_msgTypes,
	}.Build()
	File_db_proto = out.File
	file_db_proto_rawDesc = nil
	file_db_proto_goTypes = nil
	file_db_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ReadUserEmailServiceClient is the client API for ReadUserEmailService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ReadUserEmailServiceClient interface {
	Send(ctx context.Context, in *ReadUserEmail, opts ...grpc.CallOption) (*ReadUserEmailReply, error)
}

type readUserEmailServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReadUserEmailServiceClient(cc grpc.ClientConnInterface) ReadUserEmailServiceClient {
	return &readUserEmailServiceClient{cc}
}

func (c *readUserEmailServiceClient) Send(ctx context.Context, in *ReadUserEmail, opts ...grpc.CallOption) (*ReadUserEmailReply, error) {
	out := new(ReadUserEmailReply)
	err := c.cc.Invoke(ctx, "/proto.ReadUserEmailService/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadUserEmailServiceServer is the server API for ReadUserEmailService service.
type ReadUserEmailServiceServer interface {
	Send(context.Context, *ReadUserEmail) (*ReadUserEmailReply, error)
}

// UnimplementedReadUserEmailServiceServer can be embedded to have forward compatible implementations.
type UnimplementedReadUserEmailServiceServer struct {
}

func (*UnimplementedReadUserEmailServiceServer) Send(context.Context, *ReadUserEmail) (*ReadUserEmailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}

func RegisterReadUserEmailServiceServer(s *grpc.Server, srv ReadUserEmailServiceServer) {
	s.RegisterService(&_ReadUserEmailService_serviceDesc, srv)
}

func _ReadUserEmailService_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadUserEmail)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadUserEmailServiceServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ReadUserEmailService/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadUserEmailServiceServer).Send(ctx, req.(*ReadUserEmail))
	}
	return interceptor(ctx, in, info, handler)
}

var _ReadUserEmailService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ReadUserEmailService",
	HandlerType: (*ReadUserEmailServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _ReadUserEmailService_Send_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// UserSignUpServiceClient is the client API for UserSignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserSignUpServiceClient interface {
	SendUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type userSignUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSignUpServiceClient(cc grpc.ClientConnInterface) UserSignUpServiceClient {
	return &userSignUpServiceClient{cc}
}

func (c *userSignUpServiceClient) SendUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.UserSignUpService/SendUserSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSignUpServiceServer is the server API for UserSignUpService service.
type UserSignUpServiceServer interface {
	SendUserSignUp(context.Context, *UserSignUp) (*GlobalSuccessReply, error)
}

// UnimplementedUserSignUpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserSignUpServiceServer struct {
}

func (*UnimplementedUserSignUpServiceServer) SendUserSignUp(context.Context, *UserSignUp) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserSignUp not implemented")
}

func RegisterUserSignUpServiceServer(s *grpc.Server, srv UserSignUpServiceServer) {
	s.RegisterService(&_UserSignUpService_serviceDesc, srv)
}

func _UserSignUpService_SendUserSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSignUpServiceServer).SendUserSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserSignUpService/SendUserSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSignUpServiceServer).SendUserSignUp(ctx, req.(*UserSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSignUpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserSignUpService",
	HandlerType: (*UserSignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendUserSignUp",
			Handler:    _UserSignUpService_SendUserSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// CheckUserSignUpServiceClient is the client API for CheckUserSignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckUserSignUpServiceClient interface {
	CheckUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*CheckUserSignUpReply, error)
}

type checkUserSignUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckUserSignUpServiceClient(cc grpc.ClientConnInterface) CheckUserSignUpServiceClient {
	return &checkUserSignUpServiceClient{cc}
}

func (c *checkUserSignUpServiceClient) CheckUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*CheckUserSignUpReply, error) {
	out := new(CheckUserSignUpReply)
	err := c.cc.Invoke(ctx, "/proto.CheckUserSignUpService/CheckUserSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckUserSignUpServiceServer is the server API for CheckUserSignUpService service.
type CheckUserSignUpServiceServer interface {
	CheckUserSignUp(context.Context, *UserSignUp) (*CheckUserSignUpReply, error)
}

// UnimplementedCheckUserSignUpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCheckUserSignUpServiceServer struct {
}

func (*UnimplementedCheckUserSignUpServiceServer) CheckUserSignUp(context.Context, *UserSignUp) (*CheckUserSignUpReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserSignUp not implemented")
}

func RegisterCheckUserSignUpServiceServer(s *grpc.Server, srv CheckUserSignUpServiceServer) {
	s.RegisterService(&_CheckUserSignUpService_serviceDesc, srv)
}

func _CheckUserSignUpService_CheckUserSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckUserSignUpServiceServer).CheckUserSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CheckUserSignUpService/CheckUserSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckUserSignUpServiceServer).CheckUserSignUp(ctx, req.(*UserSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckUserSignUpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CheckUserSignUpService",
	HandlerType: (*CheckUserSignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserSignUp",
			Handler:    _CheckUserSignUpService_CheckUserSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// UpdateUserSignUpServiceClient is the client API for UpdateUserSignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UpdateUserSignUpServiceClient interface {
	UpdateUserSignUp(ctx context.Context, in *UpUserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type updateUserSignUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateUserSignUpServiceClient(cc grpc.ClientConnInterface) UpdateUserSignUpServiceClient {
	return &updateUserSignUpServiceClient{cc}
}

func (c *updateUserSignUpServiceClient) UpdateUserSignUp(ctx context.Context, in *UpUserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.UpdateUserSignUpService/UpdateUserSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateUserSignUpServiceServer is the server API for UpdateUserSignUpService service.
type UpdateUserSignUpServiceServer interface {
	UpdateUserSignUp(context.Context, *UpUserSignUp) (*GlobalSuccessReply, error)
}

// UnimplementedUpdateUserSignUpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUpdateUserSignUpServiceServer struct {
}

func (*UnimplementedUpdateUserSignUpServiceServer) UpdateUserSignUp(context.Context, *UpUserSignUp) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserSignUp not implemented")
}

func RegisterUpdateUserSignUpServiceServer(s *grpc.Server, srv UpdateUserSignUpServiceServer) {
	s.RegisterService(&_UpdateUserSignUpService_serviceDesc, srv)
}

func _UpdateUserSignUpService_UpdateUserSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpUserSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateUserSignUpServiceServer).UpdateUserSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UpdateUserSignUpService/UpdateUserSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateUserSignUpServiceServer).UpdateUserSignUp(ctx, req.(*UpUserSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _UpdateUserSignUpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UpdateUserSignUpService",
	HandlerType: (*UpdateUserSignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateUserSignUp",
			Handler:    _UpdateUserSignUpService_UpdateUserSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// CheckEmailExistsServiceClient is the client API for CheckEmailExistsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckEmailExistsServiceClient interface {
	CheckUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type checkEmailExistsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckEmailExistsServiceClient(cc grpc.ClientConnInterface) CheckEmailExistsServiceClient {
	return &checkEmailExistsServiceClient{cc}
}

func (c *checkEmailExistsServiceClient) CheckUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.CheckEmailExistsService/CheckUserSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckEmailExistsServiceServer is the server API for CheckEmailExistsService service.
type CheckEmailExistsServiceServer interface {
	CheckUserSignUp(context.Context, *UserSignUp) (*GlobalSuccessReply, error)
}

// UnimplementedCheckEmailExistsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCheckEmailExistsServiceServer struct {
}

func (*UnimplementedCheckEmailExistsServiceServer) CheckUserSignUp(context.Context, *UserSignUp) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserSignUp not implemented")
}

func RegisterCheckEmailExistsServiceServer(s *grpc.Server, srv CheckEmailExistsServiceServer) {
	s.RegisterService(&_CheckEmailExistsService_serviceDesc, srv)
}

func _CheckEmailExistsService_CheckUserSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckEmailExistsServiceServer).CheckUserSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CheckEmailExistsService/CheckUserSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckEmailExistsServiceServer).CheckUserSignUp(ctx, req.(*UserSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckEmailExistsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CheckEmailExistsService",
	HandlerType: (*CheckEmailExistsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserSignUp",
			Handler:    _CheckEmailExistsService_CheckUserSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}
