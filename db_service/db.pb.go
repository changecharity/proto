// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.3
// source: db.proto

//option go_package = "github.com/chezky/changeproto/db_service";

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GlobalSuccessReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *GlobalSuccessReply) Reset() {
	*x = GlobalSuccessReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GlobalSuccessReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GlobalSuccessReply) ProtoMessage() {}

func (x *GlobalSuccessReply) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GlobalSuccessReply.ProtoReflect.Descriptor instead.
func (*GlobalSuccessReply) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{0}
}

func (x *GlobalSuccessReply) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type UserSignUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email            string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password         string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Dob              int64  `protobuf:"varint,3,opt,name=dob,proto3" json:"dob,omitempty"`
	Usertoken        string `protobuf:"bytes,4,opt,name=usertoken,proto3" json:"usertoken,omitempty"`
	Plaidpublictoken string `protobuf:"bytes,5,opt,name=plaidpublictoken,proto3" json:"plaidpublictoken,omitempty"`
	Plaidaccountid   string `protobuf:"bytes,6,opt,name=plaidaccountid,proto3" json:"plaidaccountid,omitempty"`
	Key              int32  `protobuf:"varint,8,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *UserSignUp) Reset() {
	*x = UserSignUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSignUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSignUp) ProtoMessage() {}

func (x *UserSignUp) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSignUp.ProtoReflect.Descriptor instead.
func (*UserSignUp) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{1}
}

func (x *UserSignUp) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *UserSignUp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserSignUp) GetDob() int64 {
	if x != nil {
		return x.Dob
	}
	return 0
}

func (x *UserSignUp) GetUsertoken() string {
	if x != nil {
		return x.Usertoken
	}
	return ""
}

func (x *UserSignUp) GetPlaidpublictoken() string {
	if x != nil {
		return x.Plaidpublictoken
	}
	return ""
}

func (x *UserSignUp) GetPlaidaccountid() string {
	if x != nil {
		return x.Plaidaccountid
	}
	return ""
}

func (x *UserSignUp) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

type OrgSignUp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Email            string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty"`
	Password         string `protobuf:"bytes,3,opt,name=password,proto3" json:"password,omitempty"`
	Ein              int32  `protobuf:"varint,4,opt,name=ein,proto3" json:"ein,omitempty"`
	Orgtoken         string `protobuf:"bytes,5,opt,name=orgtoken,proto3" json:"orgtoken,omitempty"`
	Plaidpublictoken string `protobuf:"bytes,6,opt,name=plaidpublictoken,proto3" json:"plaidpublictoken,omitempty"`
	Plaidaccountid   string `protobuf:"bytes,7,opt,name=plaidaccountid,proto3" json:"plaidaccountid,omitempty"`
	Key              int32  `protobuf:"varint,8,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *OrgSignUp) Reset() {
	*x = OrgSignUp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgSignUp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgSignUp) ProtoMessage() {}

func (x *OrgSignUp) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgSignUp.ProtoReflect.Descriptor instead.
func (*OrgSignUp) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{2}
}

func (x *OrgSignUp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrgSignUp) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *OrgSignUp) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *OrgSignUp) GetEin() int32 {
	if x != nil {
		return x.Ein
	}
	return 0
}

func (x *OrgSignUp) GetOrgtoken() string {
	if x != nil {
		return x.Orgtoken
	}
	return ""
}

func (x *OrgSignUp) GetPlaidpublictoken() string {
	if x != nil {
		return x.Plaidpublictoken
	}
	return ""
}

func (x *OrgSignUp) GetPlaidaccountid() string {
	if x != nil {
		return x.Plaidaccountid
	}
	return ""
}

func (x *OrgSignUp) GetKey() int32 {
	if x != nil {
		return x.Key
	}
	return 0
}

type Login struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email     string `protobuf:"bytes,1,opt,name=email,proto3" json:"email,omitempty"`
	Password  string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	Usertoken string `protobuf:"bytes,3,opt,name=usertoken,proto3" json:"usertoken,omitempty"`
	Table     string `protobuf:"bytes,4,opt,name=table,proto3" json:"table,omitempty"`
}

func (x *Login) Reset() {
	*x = Login{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Login) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Login) ProtoMessage() {}

func (x *Login) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Login.ProtoReflect.Descriptor instead.
func (*Login) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{3}
}

func (x *Login) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Login) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Login) GetUsertoken() string {
	if x != nil {
		return x.Usertoken
	}
	return ""
}

func (x *Login) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

type TransactionItemID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Itemid string `protobuf:"bytes,1,opt,name=itemid,proto3" json:"itemid,omitempty"`
}

func (x *TransactionItemID) Reset() {
	*x = TransactionItemID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransactionItemID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransactionItemID) ProtoMessage() {}

func (x *TransactionItemID) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransactionItemID.ProtoReflect.Descriptor instead.
func (*TransactionItemID) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{4}
}

func (x *TransactionItemID) GetItemid() string {
	if x != nil {
		return x.Itemid
	}
	return ""
}

type StripeChargeID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chargeid string `protobuf:"bytes,1,opt,name=chargeid,proto3" json:"chargeid,omitempty"`
}

func (x *StripeChargeID) Reset() {
	*x = StripeChargeID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StripeChargeID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StripeChargeID) ProtoMessage() {}

func (x *StripeChargeID) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StripeChargeID.ProtoReflect.Descriptor instead.
func (*StripeChargeID) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{5}
}

func (x *StripeChargeID) GetChargeid() string {
	if x != nil {
		return x.Chargeid
	}
	return ""
}

type OrgName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Offset int32  `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
}

func (x *OrgName) Reset() {
	*x = OrgName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgName) ProtoMessage() {}

func (x *OrgName) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgName.ProtoReflect.Descriptor instead.
func (*OrgName) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{6}
}

func (x *OrgName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OrgName) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

type OrgNameReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names []string `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
}

func (x *OrgNameReply) Reset() {
	*x = OrgNameReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgNameReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgNameReply) ProtoMessage() {}

func (x *OrgNameReply) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgNameReply.ProtoReflect.Descriptor instead.
func (*OrgNameReply) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{7}
}

func (x *OrgNameReply) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type TransferPDFParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// add start and end date
	Usertoken string `protobuf:"bytes,1,opt,name=usertoken,proto3" json:"usertoken,omitempty"`
}

func (x *TransferPDFParams) Reset() {
	*x = TransferPDFParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_db_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferPDFParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferPDFParams) ProtoMessage() {}

func (x *TransferPDFParams) ProtoReflect() protoreflect.Message {
	mi := &file_db_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferPDFParams.ProtoReflect.Descriptor instead.
func (*TransferPDFParams) Descriptor() ([]byte, []int) {
	return file_db_proto_rawDescGZIP(), []int{8}
}

func (x *TransferPDFParams) GetUsertoken() string {
	if x != nil {
		return x.Usertoken
	}
	return ""
}

var File_db_proto protoreflect.FileDescriptor

var file_db_proto_rawDesc = []byte{
	0x0a, 0x08, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x2e, 0x0a, 0x12, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0xd4, 0x01, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70,
	0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6f, 0x62, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x03, 0x64, 0x6f, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x6b, 0x65,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x75, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x6b,
	0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c,
	0x61, 0x69, 0x64, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xe5, 0x01, 0x0a, 0x09, 0x4f, 0x72, 0x67,
	0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x65, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x69, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x6f, 0x72, 0x67, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x6f, 0x72, 0x67, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x70, 0x6c,
	0x61, 0x69, 0x64, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6c, 0x61, 0x69, 0x64, 0x61,
	0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x70, 0x6c, 0x61, 0x69, 0x64, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x22, 0x6d, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x75,
	0x73, 0x65, 0x72, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0x2b, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x74,
	0x65, 0x6d, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x69, 0x64, 0x22, 0x2c, 0x0a, 0x0e,
	0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x69, 0x64, 0x22, 0x35, 0x0a, 0x07, 0x4f, 0x72,
	0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x22, 0x24, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x31, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x65, 0x72, 0x50, 0x44, 0x46, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x75, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x75, 0x73, 0x65, 0x72, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x32, 0x55, 0x0a, 0x11, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x0e, 0x53, 0x65, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55,
	0x70, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x70, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f,
	0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22,
	0x00, 0x32, 0x52, 0x0a, 0x10, 0x4f, 0x72, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x53, 0x65, 0x6e, 0x64, 0x4f, 0x72, 0x67,
	0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f,
	0x72, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x5b, 0x0a, 0x16, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73,
	0x65, 0x72, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12,
	0x41, 0x0a, 0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x55, 0x73, 0x65, 0x72, 0x53, 0x69, 0x67, 0x6e,
	0x55, 0x70, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x69, 0x67, 0x6e, 0x55, 0x70, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x32, 0x58, 0x0a, 0x15, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x53, 0x69,
	0x67, 0x6e, 0x55, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0e, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x4f, 0x72, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x12, 0x10, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x67, 0x53, 0x69, 0x67, 0x6e, 0x55, 0x70, 0x1a,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x4a, 0x0a, 0x10,
	0x41, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x36, 0x0a, 0x09, 0x41, 0x75, 0x74, 0x68, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x1a, 0x19, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x32, 0x68, 0x0a, 0x19, 0x42, 0x65, 0x67, 0x69,
	0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x48, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x12, 0x42, 0x65, 0x67, 0x69, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x57, 0x48, 0x12, 0x18, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x44, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c,
	0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x00, 0x32, 0x5f, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x45, 0x0a, 0x0f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x72, 0x6d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x12,
	0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x70, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x49, 0x44, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47,
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x32, 0x4e, 0x0a, 0x14, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x72, 0x67,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x0d, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4f, 0x72, 0x67, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x22, 0x00, 0x32, 0x5a, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50,
	0x44, 0x46, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a, 0x0b, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x44, 0x46, 0x12, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x50, 0x44, 0x46, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x1a, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x6c, 0x6f, 0x62, 0x61,
	0x6c, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x00, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_db_proto_rawDescOnce sync.Once
	file_db_proto_rawDescData = file_db_proto_rawDesc
)

func file_db_proto_rawDescGZIP() []byte {
	file_db_proto_rawDescOnce.Do(func() {
		file_db_proto_rawDescData = protoimpl.X.CompressGZIP(file_db_proto_rawDescData)
	})
	return file_db_proto_rawDescData
}

var file_db_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_db_proto_goTypes = []interface{}{
	(*GlobalSuccessReply)(nil), // 0: proto.GlobalSuccessReply
	(*UserSignUp)(nil),         // 1: proto.UserSignUp
	(*OrgSignUp)(nil),          // 2: proto.OrgSignUp
	(*Login)(nil),              // 3: proto.Login
	(*TransactionItemID)(nil),  // 4: proto.TransactionItemID
	(*StripeChargeID)(nil),     // 5: proto.StripeChargeID
	(*OrgName)(nil),            // 6: proto.OrgName
	(*OrgNameReply)(nil),       // 7: proto.OrgNameReply
	(*TransferPDFParams)(nil),  // 8: proto.TransferPDFParams
}
var file_db_proto_depIdxs = []int32{
	1, // 0: proto.UserSignUpService.SendUserSignUp:input_type -> proto.UserSignUp
	2, // 1: proto.OrgSignUpService.SendOrgSignUp:input_type -> proto.OrgSignUp
	1, // 2: proto.CheckUserSignUpService.CheckUserSignUp:input_type -> proto.UserSignUp
	2, // 3: proto.CheckOrgSignUpService.CheckOrgSignUp:input_type -> proto.OrgSignUp
	3, // 4: proto.AuthLoginService.AuthLogin:input_type -> proto.Login
	4, // 5: proto.BeginTransactionWHService.BeginTransactionWH:input_type -> proto.TransactionItemID
	5, // 6: proto.ConfirmTransferService.ConfirmTransfer:input_type -> proto.StripeChargeID
	6, // 7: proto.SearchOrgNameService.SearchOrgName:input_type -> proto.OrgName
	8, // 8: proto.TransferPDFService.TransferPDF:input_type -> proto.TransferPDFParams
	0, // 9: proto.UserSignUpService.SendUserSignUp:output_type -> proto.GlobalSuccessReply
	0, // 10: proto.OrgSignUpService.SendOrgSignUp:output_type -> proto.GlobalSuccessReply
	0, // 11: proto.CheckUserSignUpService.CheckUserSignUp:output_type -> proto.GlobalSuccessReply
	0, // 12: proto.CheckOrgSignUpService.CheckOrgSignUp:output_type -> proto.GlobalSuccessReply
	0, // 13: proto.AuthLoginService.AuthLogin:output_type -> proto.GlobalSuccessReply
	0, // 14: proto.BeginTransactionWHService.BeginTransactionWH:output_type -> proto.GlobalSuccessReply
	0, // 15: proto.ConfirmTransferService.ConfirmTransfer:output_type -> proto.GlobalSuccessReply
	7, // 16: proto.SearchOrgNameService.SearchOrgName:output_type -> proto.OrgNameReply
	0, // 17: proto.TransferPDFService.TransferPDF:output_type -> proto.GlobalSuccessReply
	9, // [9:18] is the sub-list for method output_type
	0, // [0:9] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_db_proto_init() }
func file_db_proto_init() {
	if File_db_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_db_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GlobalSuccessReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSignUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgSignUp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Login); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransactionItemID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StripeChargeID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgNameReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_db_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferPDFParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_db_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   9,
		},
		GoTypes:           file_db_proto_goTypes,
		DependencyIndexes: file_db_proto_depIdxs,
		MessageInfos:      file_db_proto_msgTypes,
	}.Build()
	File_db_proto = out.File
	file_db_proto_rawDesc = nil
	file_db_proto_goTypes = nil
	file_db_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// UserSignUpServiceClient is the client API for UserSignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserSignUpServiceClient interface {
	SendUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type userSignUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserSignUpServiceClient(cc grpc.ClientConnInterface) UserSignUpServiceClient {
	return &userSignUpServiceClient{cc}
}

func (c *userSignUpServiceClient) SendUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.UserSignUpService/SendUserSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserSignUpServiceServer is the server API for UserSignUpService service.
type UserSignUpServiceServer interface {
	SendUserSignUp(context.Context, *UserSignUp) (*GlobalSuccessReply, error)
}

// UnimplementedUserSignUpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedUserSignUpServiceServer struct {
}

func (*UnimplementedUserSignUpServiceServer) SendUserSignUp(context.Context, *UserSignUp) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendUserSignUp not implemented")
}

func RegisterUserSignUpServiceServer(s *grpc.Server, srv UserSignUpServiceServer) {
	s.RegisterService(&_UserSignUpService_serviceDesc, srv)
}

func _UserSignUpService_SendUserSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserSignUpServiceServer).SendUserSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.UserSignUpService/SendUserSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserSignUpServiceServer).SendUserSignUp(ctx, req.(*UserSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserSignUpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.UserSignUpService",
	HandlerType: (*UserSignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendUserSignUp",
			Handler:    _UserSignUpService_SendUserSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// OrgSignUpServiceClient is the client API for OrgSignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrgSignUpServiceClient interface {
	SendOrgSignUp(ctx context.Context, in *OrgSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type orgSignUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewOrgSignUpServiceClient(cc grpc.ClientConnInterface) OrgSignUpServiceClient {
	return &orgSignUpServiceClient{cc}
}

func (c *orgSignUpServiceClient) SendOrgSignUp(ctx context.Context, in *OrgSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.OrgSignUpService/SendOrgSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrgSignUpServiceServer is the server API for OrgSignUpService service.
type OrgSignUpServiceServer interface {
	SendOrgSignUp(context.Context, *OrgSignUp) (*GlobalSuccessReply, error)
}

// UnimplementedOrgSignUpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedOrgSignUpServiceServer struct {
}

func (*UnimplementedOrgSignUpServiceServer) SendOrgSignUp(context.Context, *OrgSignUp) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendOrgSignUp not implemented")
}

func RegisterOrgSignUpServiceServer(s *grpc.Server, srv OrgSignUpServiceServer) {
	s.RegisterService(&_OrgSignUpService_serviceDesc, srv)
}

func _OrgSignUpService_SendOrgSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrgSignUpServiceServer).SendOrgSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.OrgSignUpService/SendOrgSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrgSignUpServiceServer).SendOrgSignUp(ctx, req.(*OrgSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _OrgSignUpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.OrgSignUpService",
	HandlerType: (*OrgSignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendOrgSignUp",
			Handler:    _OrgSignUpService_SendOrgSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// CheckUserSignUpServiceClient is the client API for CheckUserSignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckUserSignUpServiceClient interface {
	CheckUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type checkUserSignUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckUserSignUpServiceClient(cc grpc.ClientConnInterface) CheckUserSignUpServiceClient {
	return &checkUserSignUpServiceClient{cc}
}

func (c *checkUserSignUpServiceClient) CheckUserSignUp(ctx context.Context, in *UserSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.CheckUserSignUpService/CheckUserSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckUserSignUpServiceServer is the server API for CheckUserSignUpService service.
type CheckUserSignUpServiceServer interface {
	CheckUserSignUp(context.Context, *UserSignUp) (*GlobalSuccessReply, error)
}

// UnimplementedCheckUserSignUpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCheckUserSignUpServiceServer struct {
}

func (*UnimplementedCheckUserSignUpServiceServer) CheckUserSignUp(context.Context, *UserSignUp) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUserSignUp not implemented")
}

func RegisterCheckUserSignUpServiceServer(s *grpc.Server, srv CheckUserSignUpServiceServer) {
	s.RegisterService(&_CheckUserSignUpService_serviceDesc, srv)
}

func _CheckUserSignUpService_CheckUserSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckUserSignUpServiceServer).CheckUserSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CheckUserSignUpService/CheckUserSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckUserSignUpServiceServer).CheckUserSignUp(ctx, req.(*UserSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckUserSignUpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CheckUserSignUpService",
	HandlerType: (*CheckUserSignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckUserSignUp",
			Handler:    _CheckUserSignUpService_CheckUserSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// CheckOrgSignUpServiceClient is the client API for CheckOrgSignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckOrgSignUpServiceClient interface {
	CheckOrgSignUp(ctx context.Context, in *OrgSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type checkOrgSignUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCheckOrgSignUpServiceClient(cc grpc.ClientConnInterface) CheckOrgSignUpServiceClient {
	return &checkOrgSignUpServiceClient{cc}
}

func (c *checkOrgSignUpServiceClient) CheckOrgSignUp(ctx context.Context, in *OrgSignUp, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.CheckOrgSignUpService/CheckOrgSignUp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckOrgSignUpServiceServer is the server API for CheckOrgSignUpService service.
type CheckOrgSignUpServiceServer interface {
	CheckOrgSignUp(context.Context, *OrgSignUp) (*GlobalSuccessReply, error)
}

// UnimplementedCheckOrgSignUpServiceServer can be embedded to have forward compatible implementations.
type UnimplementedCheckOrgSignUpServiceServer struct {
}

func (*UnimplementedCheckOrgSignUpServiceServer) CheckOrgSignUp(context.Context, *OrgSignUp) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckOrgSignUp not implemented")
}

func RegisterCheckOrgSignUpServiceServer(s *grpc.Server, srv CheckOrgSignUpServiceServer) {
	s.RegisterService(&_CheckOrgSignUpService_serviceDesc, srv)
}

func _CheckOrgSignUpService_CheckOrgSignUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgSignUp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckOrgSignUpServiceServer).CheckOrgSignUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.CheckOrgSignUpService/CheckOrgSignUp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckOrgSignUpServiceServer).CheckOrgSignUp(ctx, req.(*OrgSignUp))
	}
	return interceptor(ctx, in, info, handler)
}

var _CheckOrgSignUpService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CheckOrgSignUpService",
	HandlerType: (*CheckOrgSignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckOrgSignUp",
			Handler:    _CheckOrgSignUpService_CheckOrgSignUp_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// AuthLoginServiceClient is the client API for AuthLoginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AuthLoginServiceClient interface {
	AuthLogin(ctx context.Context, in *Login, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type authLoginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthLoginServiceClient(cc grpc.ClientConnInterface) AuthLoginServiceClient {
	return &authLoginServiceClient{cc}
}

func (c *authLoginServiceClient) AuthLogin(ctx context.Context, in *Login, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.AuthLoginService/AuthLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthLoginServiceServer is the server API for AuthLoginService service.
type AuthLoginServiceServer interface {
	AuthLogin(context.Context, *Login) (*GlobalSuccessReply, error)
}

// UnimplementedAuthLoginServiceServer can be embedded to have forward compatible implementations.
type UnimplementedAuthLoginServiceServer struct {
}

func (*UnimplementedAuthLoginServiceServer) AuthLogin(context.Context, *Login) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AuthLogin not implemented")
}

func RegisterAuthLoginServiceServer(s *grpc.Server, srv AuthLoginServiceServer) {
	s.RegisterService(&_AuthLoginService_serviceDesc, srv)
}

func _AuthLoginService_AuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Login)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthLoginServiceServer).AuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.AuthLoginService/AuthLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthLoginServiceServer).AuthLogin(ctx, req.(*Login))
	}
	return interceptor(ctx, in, info, handler)
}

var _AuthLoginService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.AuthLoginService",
	HandlerType: (*AuthLoginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AuthLogin",
			Handler:    _AuthLoginService_AuthLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// BeginTransactionWHServiceClient is the client API for BeginTransactionWHService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeginTransactionWHServiceClient interface {
	BeginTransactionWH(ctx context.Context, in *TransactionItemID, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type beginTransactionWHServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBeginTransactionWHServiceClient(cc grpc.ClientConnInterface) BeginTransactionWHServiceClient {
	return &beginTransactionWHServiceClient{cc}
}

func (c *beginTransactionWHServiceClient) BeginTransactionWH(ctx context.Context, in *TransactionItemID, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.BeginTransactionWHService/BeginTransactionWH", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BeginTransactionWHServiceServer is the server API for BeginTransactionWHService service.
type BeginTransactionWHServiceServer interface {
	BeginTransactionWH(context.Context, *TransactionItemID) (*GlobalSuccessReply, error)
}

// UnimplementedBeginTransactionWHServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBeginTransactionWHServiceServer struct {
}

func (*UnimplementedBeginTransactionWHServiceServer) BeginTransactionWH(context.Context, *TransactionItemID) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BeginTransactionWH not implemented")
}

func RegisterBeginTransactionWHServiceServer(s *grpc.Server, srv BeginTransactionWHServiceServer) {
	s.RegisterService(&_BeginTransactionWHService_serviceDesc, srv)
}

func _BeginTransactionWHService_BeginTransactionWH_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransactionItemID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeginTransactionWHServiceServer).BeginTransactionWH(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BeginTransactionWHService/BeginTransactionWH",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeginTransactionWHServiceServer).BeginTransactionWH(ctx, req.(*TransactionItemID))
	}
	return interceptor(ctx, in, info, handler)
}

var _BeginTransactionWHService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BeginTransactionWHService",
	HandlerType: (*BeginTransactionWHServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BeginTransactionWH",
			Handler:    _BeginTransactionWHService_BeginTransactionWH_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// ConfirmTransferServiceClient is the client API for ConfirmTransferService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfirmTransferServiceClient interface {
	ConfirmTransfer(ctx context.Context, in *StripeChargeID, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type confirmTransferServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfirmTransferServiceClient(cc grpc.ClientConnInterface) ConfirmTransferServiceClient {
	return &confirmTransferServiceClient{cc}
}

func (c *confirmTransferServiceClient) ConfirmTransfer(ctx context.Context, in *StripeChargeID, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.ConfirmTransferService/ConfirmTransfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfirmTransferServiceServer is the server API for ConfirmTransferService service.
type ConfirmTransferServiceServer interface {
	ConfirmTransfer(context.Context, *StripeChargeID) (*GlobalSuccessReply, error)
}

// UnimplementedConfirmTransferServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConfirmTransferServiceServer struct {
}

func (*UnimplementedConfirmTransferServiceServer) ConfirmTransfer(context.Context, *StripeChargeID) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmTransfer not implemented")
}

func RegisterConfirmTransferServiceServer(s *grpc.Server, srv ConfirmTransferServiceServer) {
	s.RegisterService(&_ConfirmTransferService_serviceDesc, srv)
}

func _ConfirmTransferService_ConfirmTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StripeChargeID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfirmTransferServiceServer).ConfirmTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ConfirmTransferService/ConfirmTransfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfirmTransferServiceServer).ConfirmTransfer(ctx, req.(*StripeChargeID))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfirmTransferService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ConfirmTransferService",
	HandlerType: (*ConfirmTransferServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ConfirmTransfer",
			Handler:    _ConfirmTransferService_ConfirmTransfer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// SearchOrgNameServiceClient is the client API for SearchOrgNameService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SearchOrgNameServiceClient interface {
	SearchOrgName(ctx context.Context, in *OrgName, opts ...grpc.CallOption) (*OrgNameReply, error)
}

type searchOrgNameServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSearchOrgNameServiceClient(cc grpc.ClientConnInterface) SearchOrgNameServiceClient {
	return &searchOrgNameServiceClient{cc}
}

func (c *searchOrgNameServiceClient) SearchOrgName(ctx context.Context, in *OrgName, opts ...grpc.CallOption) (*OrgNameReply, error) {
	out := new(OrgNameReply)
	err := c.cc.Invoke(ctx, "/proto.SearchOrgNameService/SearchOrgName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SearchOrgNameServiceServer is the server API for SearchOrgNameService service.
type SearchOrgNameServiceServer interface {
	SearchOrgName(context.Context, *OrgName) (*OrgNameReply, error)
}

// UnimplementedSearchOrgNameServiceServer can be embedded to have forward compatible implementations.
type UnimplementedSearchOrgNameServiceServer struct {
}

func (*UnimplementedSearchOrgNameServiceServer) SearchOrgName(context.Context, *OrgName) (*OrgNameReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchOrgName not implemented")
}

func RegisterSearchOrgNameServiceServer(s *grpc.Server, srv SearchOrgNameServiceServer) {
	s.RegisterService(&_SearchOrgNameService_serviceDesc, srv)
}

func _SearchOrgNameService_SearchOrgName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OrgName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SearchOrgNameServiceServer).SearchOrgName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.SearchOrgNameService/SearchOrgName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SearchOrgNameServiceServer).SearchOrgName(ctx, req.(*OrgName))
	}
	return interceptor(ctx, in, info, handler)
}

var _SearchOrgNameService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.SearchOrgNameService",
	HandlerType: (*SearchOrgNameServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchOrgName",
			Handler:    _SearchOrgNameService_SearchOrgName_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}

// TransferPDFServiceClient is the client API for TransferPDFService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TransferPDFServiceClient interface {
	TransferPDF(ctx context.Context, in *TransferPDFParams, opts ...grpc.CallOption) (*GlobalSuccessReply, error)
}

type transferPDFServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTransferPDFServiceClient(cc grpc.ClientConnInterface) TransferPDFServiceClient {
	return &transferPDFServiceClient{cc}
}

func (c *transferPDFServiceClient) TransferPDF(ctx context.Context, in *TransferPDFParams, opts ...grpc.CallOption) (*GlobalSuccessReply, error) {
	out := new(GlobalSuccessReply)
	err := c.cc.Invoke(ctx, "/proto.TransferPDFService/TransferPDF", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransferPDFServiceServer is the server API for TransferPDFService service.
type TransferPDFServiceServer interface {
	TransferPDF(context.Context, *TransferPDFParams) (*GlobalSuccessReply, error)
}

// UnimplementedTransferPDFServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTransferPDFServiceServer struct {
}

func (*UnimplementedTransferPDFServiceServer) TransferPDF(context.Context, *TransferPDFParams) (*GlobalSuccessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferPDF not implemented")
}

func RegisterTransferPDFServiceServer(s *grpc.Server, srv TransferPDFServiceServer) {
	s.RegisterService(&_TransferPDFService_serviceDesc, srv)
}

func _TransferPDFService_TransferPDF_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferPDFParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransferPDFServiceServer).TransferPDF(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.TransferPDFService/TransferPDF",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransferPDFServiceServer).TransferPDF(ctx, req.(*TransferPDFParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _TransferPDFService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.TransferPDFService",
	HandlerType: (*TransferPDFServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferPDF",
			Handler:    _TransferPDFService_TransferPDF_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "db.proto",
}
